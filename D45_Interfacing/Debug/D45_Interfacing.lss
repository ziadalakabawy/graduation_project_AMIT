
D45_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000011f4  00001288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000a6  008000a6  000012ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d93  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f2b  00000000  00000000  000042ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012a9  00000000  00000000  0000521a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  000064c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f1c  00000000  00000000  00006970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001811  00000000  00000000  0000788c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_1>
       8:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_2>
       c:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
      8a:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Cmd>:
		for (u8 i=0;i<8;i++)
		{
			LCD_Char(msg[i]);
		}
	}
}
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
      96:	60 e0       	ldi	r22, 0x00	; 0
      98:	89 e0       	ldi	r24, 0x09	; 9
      9a:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_ReadPort>
      a4:	8f 70       	andi	r24, 0x0F	; 15
      a6:	9c 2f       	mov	r25, r28
      a8:	90 7f       	andi	r25, 0xF0	; 240
      aa:	68 2f       	mov	r22, r24
      ac:	69 2b       	or	r22, r25
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 11 05 	call	0xa22	; 0xa22 <DIO_WritePort>
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	8b e0       	ldi	r24, 0x0B	; 11
      b8:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	01 97       	sbiw	r24, 0x01	; 1
      c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Cmd+0x2e>
      c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_Cmd+0x34>
      c6:	00 00       	nop
      c8:	61 e0       	ldi	r22, 0x01	; 1
      ca:	8b e0       	ldi	r24, 0x0B	; 11
      cc:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
      d0:	8f e1       	ldi	r24, 0x1F	; 31
      d2:	9e e4       	ldi	r25, 0x4E	; 78
      d4:	01 97       	sbiw	r24, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Cmd+0x42>
      d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_Cmd+0x48>
      da:	00 00       	nop
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_ReadPort>
      e2:	8f 70       	andi	r24, 0x0F	; 15
      e4:	90 e1       	ldi	r25, 0x10	; 16
      e6:	c9 9f       	mul	r28, r25
      e8:	90 01       	movw	r18, r0
      ea:	11 24       	eor	r1, r1
      ec:	68 2f       	mov	r22, r24
      ee:	62 2b       	or	r22, r18
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 11 05 	call	0xa22	; 0xa22 <DIO_WritePort>
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	8b e0       	ldi	r24, 0x0B	; 11
      fa:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
      fe:	8f e8       	ldi	r24, 0x8F	; 143
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	01 97       	sbiw	r24, 0x01	; 1
     104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Cmd+0x70>
     106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_Cmd+0x76>
     108:	00 00       	nop
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	8b e0       	ldi	r24, 0x0B	; 11
     10e:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
     112:	8f e3       	ldi	r24, 0x3F	; 63
     114:	9f e1       	ldi	r25, 0x1F	; 31
     116:	01 97       	sbiw	r24, 0x01	; 1
     118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Cmd+0x84>
     11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Cmd+0x8a>
     11c:	00 00       	nop
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <LCD_Init>:
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	8a e0       	ldi	r24, 0x0A	; 10
     126:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
     12a:	61 e0       	ldi	r22, 0x01	; 1
     12c:	8b e0       	ldi	r24, 0x0B	; 11
     12e:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
     132:	2f ef       	ldi	r18, 0xFF	; 255
     134:	89 ef       	ldi	r24, 0xF9	; 249
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	21 50       	subi	r18, 0x01	; 1
     13a:	80 40       	sbci	r24, 0x00	; 0
     13c:	90 40       	sbci	r25, 0x00	; 0
     13e:	e1 f7       	brne	.-8      	; 0x138 <LCD_Init+0x16>
     140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Init+0x20>
     142:	00 00       	nop
     144:	83 e3       	ldi	r24, 0x33	; 51
     146:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
     14a:	82 e3       	ldi	r24, 0x32	; 50
     14c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
     150:	88 e2       	ldi	r24, 0x28	; 40
     152:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
     156:	86 e0       	ldi	r24, 0x06	; 6
     158:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
     15c:	8c e0       	ldi	r24, 0x0C	; 12
     15e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
     162:	08 95       	ret

00000164 <LCD_Char>:
     164:	cf 93       	push	r28
     166:	c8 2f       	mov	r28, r24
     168:	61 e0       	ldi	r22, 0x01	; 1
     16a:	89 e0       	ldi	r24, 0x09	; 9
     16c:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_ReadPort>
     176:	8f 70       	andi	r24, 0x0F	; 15
     178:	9c 2f       	mov	r25, r28
     17a:	90 7f       	andi	r25, 0xF0	; 240
     17c:	68 2f       	mov	r22, r24
     17e:	69 2b       	or	r22, r25
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	0e 94 11 05 	call	0xa22	; 0xa22 <DIO_WritePort>
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	8b e0       	ldi	r24, 0x0B	; 11
     18a:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
     18e:	8f e8       	ldi	r24, 0x8F	; 143
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Char+0x2e>
     196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Char+0x34>
     198:	00 00       	nop
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	8b e0       	ldi	r24, 0x0B	; 11
     19e:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
     1a2:	8f e1       	ldi	r24, 0x1F	; 31
     1a4:	9e e4       	ldi	r25, 0x4E	; 78
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Char+0x42>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Char+0x48>
     1ac:	00 00       	nop
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_ReadPort>
     1b4:	8f 70       	andi	r24, 0x0F	; 15
     1b6:	90 e1       	ldi	r25, 0x10	; 16
     1b8:	c9 9f       	mul	r28, r25
     1ba:	90 01       	movw	r18, r0
     1bc:	11 24       	eor	r1, r1
     1be:	68 2f       	mov	r22, r24
     1c0:	62 2b       	or	r22, r18
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 11 05 	call	0xa22	; 0xa22 <DIO_WritePort>
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	8b e0       	ldi	r24, 0x0B	; 11
     1cc:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
     1d0:	8f e8       	ldi	r24, 0x8F	; 143
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_Char+0x70>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_Char+0x76>
     1da:	00 00       	nop
     1dc:	61 e0       	ldi	r22, 0x01	; 1
     1de:	8b e0       	ldi	r24, 0x0B	; 11
     1e0:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
     1e4:	8f e3       	ldi	r24, 0x3F	; 63
     1e6:	9f e1       	ldi	r25, 0x1F	; 31
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCD_Char+0x84>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCD_Char+0x8a>
     1ee:	00 00       	nop
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <LCD_String>:
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	fc 01       	movw	r30, r24
     1fc:	80 81       	ld	r24, Z
     1fe:	88 23       	and	r24, r24
     200:	59 f0       	breq	.+22     	; 0x218 <LCD_String+0x24>
     202:	8f 01       	movw	r16, r30
     204:	c0 e0       	ldi	r28, 0x00	; 0
     206:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_Char>
     20a:	cf 5f       	subi	r28, 0xFF	; 255
     20c:	f8 01       	movw	r30, r16
     20e:	ec 0f       	add	r30, r28
     210:	f1 1d       	adc	r31, r1
     212:	80 81       	ld	r24, Z
     214:	81 11       	cpse	r24, r1
     216:	f7 cf       	rjmp	.-18     	; 0x206 <LCD_String+0x12>
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	08 95       	ret

00000220 <LCD_Clear>:
void LCD_Clear(void){
	LCD_Cmd(0x01);
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
     226:	08 95       	ret

00000228 <PWM_Generate_COM1B>:
	TIMER1_OCR1A_SetValue(OCR1A_Value);
	TIMER1_ICR1_SetValue(ICR_Value);
	//TIMER1_InitTypes options = {PWM_Fast,Clock_64,COM1A_Non_Inverting,COM1B_Disable,TOVInt_Disable};
	//TIMER1_Init(&options);
}
void PWM_Generate_COM1B(u8 duty){
     228:	cf 93       	push	r28
     22a:	c8 2f       	mov	r28, r24
	DIO_ConfigChannel(DIO_ChannelD4,Output);
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	8c e1       	ldi	r24, 0x1C	; 28
     230:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	u16 ICR_Value = 0xFFFF;
	u16 OCR1B_Value = (u16)((((float)duty/100)*((u32)ICR_Value+1))-1);
	TIMER1_OCR1B_SetValue(OCR1B_Value);
     234:	6c 2f       	mov	r22, r28
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 a1 07 	call	0xf42	; 0xf42 <__floatunsisf>
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	48 ec       	ldi	r20, 0xC8	; 200
     246:	52 e4       	ldi	r21, 0x42	; 66
     248:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3>
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	57 e4       	ldi	r21, 0x47	; 71
     254:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e8       	ldi	r20, 0x80	; 128
     25e:	5f e3       	ldi	r21, 0x3F	; 63
     260:	0e 94 93 06 	call	0xd26	; 0xd26 <__subsf3>
     264:	0e 94 72 07 	call	0xee4	; 0xee4 <__fixunssfsi>
     268:	cb 01       	movw	r24, r22
     26a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TIMER1_OCR1B_SetValue>
	TIMER1_ICR1_SetValue(ICR_Value);
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	9f ef       	ldi	r25, 0xFF	; 255
     272:	0e 94 90 06 	call	0xd20	; 0xd20 <TIMER1_ICR1_SetValue>
	//TIMER1_InitTypes options = {PWM_Fast,Clock_64,COM1A_Non_Inverting,COM1B_Disable,TOVInt_Disable};
	//TIMER1_Init(&options);
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <ServoMotor>:
* Created: 4/14/2023 9:45:25 PM
*  Author: user
*/
#include "ServoMotor.h"

void ServoMotor(s32 angle){
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	6b 01       	movw	r12, r22
     284:	7c 01       	movw	r14, r24
	DIO_ConfigChannel(DIO_ChannelD5,Output);
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	8d e1       	ldi	r24, 0x1D	; 29
     28a:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	u16 ICR_Value = 0xFFFF;
	u16 OCR1A_Value = (u16)(((angle-MiniAngle)*((float)(MaxCount-MiniCount)/(MaxAngle-MiniAngle)))+MiniCount-1);
	TIMER1_OCR1A_SetValue(OCR1A_Value);
     28e:	c7 01       	movw	r24, r14
     290:	b6 01       	movw	r22, r12
     292:	0e 94 a3 07 	call	0xf46	; 0xf46 <__floatsisf>
     296:	2c e1       	ldi	r18, 0x1C	; 28
     298:	37 ec       	ldi	r19, 0xC7	; 199
     29a:	41 eb       	ldi	r20, 0xB1	; 177
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	4a e7       	ldi	r20, 0x7A	; 122
     2a8:	53 e4       	ldi	r21, 0x43	; 67
     2aa:	0e 94 94 06 	call	0xd28	; 0xd28 <__addsf3>
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e8       	ldi	r20, 0x80	; 128
     2b4:	5f e3       	ldi	r21, 0x3F	; 63
     2b6:	0e 94 93 06 	call	0xd26	; 0xd26 <__subsf3>
     2ba:	0e 94 72 07 	call	0xee4	; 0xee4 <__fixunssfsi>
     2be:	cb 01       	movw	r24, r22
     2c0:	0e 94 8a 06 	call	0xd14	; 0xd14 <TIMER1_OCR1A_SetValue>
	TIMER1_ICR1_SetValue(ICR_Value);
     2c4:	8f ef       	ldi	r24, 0xFF	; 255
     2c6:	9f ef       	ldi	r25, 0xFF	; 255
     2c8:	0e 94 90 06 	call	0xd20	; 0xd20 <TIMER1_ICR1_SetValue>
	//TIMER1_InitTypes options = {PWM_Fast,Clock_64,COM1A_Non_Inverting,COM1B_Disable,TOVInt_Disable};
	//TIMER1_Init(&options);
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	08 95       	ret

000002d6 <main>:

volatile u32 buttonTimer = 0;
volatile u32 buttonTimer_2=0;
volatile u8 flag=0;
int main(void)
{
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	a5 97       	sbiw	r28, 0x25	; 37
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
     2ea:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_Init>
	LCD_Init();
     2ee:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
	TIMER1_InitTypes options_1={PWM_Fast,Clock_64,COM1A_Non_Inverting,COM1B_Non_Inverting,TOVInt_Disable};
     2f2:	85 e0       	ldi	r24, 0x05	; 5
     2f4:	e0 ea       	ldi	r30, 0xA0	; 160
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	de 01       	movw	r26, r28
     2fa:	11 96       	adiw	r26, 0x01	; 1
     2fc:	01 90       	ld	r0, Z+
     2fe:	0d 92       	st	X+, r0
     300:	8a 95       	dec	r24
     302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x26>
	TIMER1_Init(&options_1);
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	0e 94 2d 06 	call	0xc5a	; 0xc5a <TIMER1_Init>
	TCNT0=47;
     30c:	8f e2       	ldi	r24, 0x2F	; 47
     30e:	82 bf       	out	0x32, r24	; 50
	TCCR0=(1<<CS01)|(1<<CS00);
     310:	93 e0       	ldi	r25, 0x03	; 3
     312:	93 bf       	out	0x33, r25	; 51
	TCCR2 |= (1 << CS22) | (1 << CS21);  // Timer2, normal mode, /64 prescaler
     314:	85 b5       	in	r24, 0x25	; 37
     316:	86 60       	ori	r24, 0x06	; 6
     318:	85 bd       	out	0x25, r24	; 37
	ADC_InitTypes options={ADC_Prescaler64,ADC_Vref_Internal};
     31a:	86 e0       	ldi	r24, 0x06	; 6
     31c:	8e 83       	std	Y+6, r24	; 0x06
     31e:	9f 83       	std	Y+7, r25	; 0x07
	ADC_Init(&options);
     320:	ce 01       	movw	r24, r28
     322:	06 96       	adiw	r24, 0x06	; 6
     324:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ADC_Init>
	u16 readvalue= 0;
	s8 crtvalue[10];
	s8 setvalue[10];
	s8 EE_read[10],EE_write;
	DIO_ConfigChannel(DIO_ChannelC2,Output); // Heater
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	82 e1       	ldi	r24, 0x12	; 18
     32c:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelC3,Output);	// Cooler
     330:	61 e0       	ldi	r22, 0x01	; 1
     332:	83 e1       	ldi	r24, 0x13	; 19
     334:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelD2,Output);
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	8a e1       	ldi	r24, 0x1A	; 26
     33c:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelD3,Output);
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	8b e1       	ldi	r24, 0x1B	; 27
     344:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelD6,Output);
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	8e e1       	ldi	r24, 0x1E	; 30
     34c:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelC4,Input);		//ON/OFF button
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	84 e1       	ldi	r24, 0x14	; 20
     354:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelD0,Input);		//DOWN button
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	88 e1       	ldi	r24, 0x18	; 24
     35c:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelD1,Input);  //UP button
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	89 e1       	ldi	r24, 0x19	; 25
     364:	0e 94 8f 04 	call	0x91e	; 0x91e <DIO_ConfigChannel>
	GINT_EnableAllInterrupts();
     368:	0e 94 29 06 	call	0xc52	; 0xc52 <GINT_EnableAllInterrupts>
	u8 displaystate=1,set_temp=25,Current_temp=0,ON=0;
	//LCD_String("current temp: ");
	memset(EE_read,0,15);
     36c:	fe 01       	movw	r30, r28
     36e:	7c 96       	adiw	r30, 0x1c	; 28
     370:	8f e0       	ldi	r24, 0x0F	; 15
     372:	df 01       	movw	r26, r30
     374:	1d 92       	st	X+, r1
     376:	8a 95       	dec	r24
     378:	e9 f7       	brne	.-6      	; 0x374 <main+0x9e>
	DIO_ConfigChannel(DIO_ChannelD6,Output);
	DIO_ConfigChannel(DIO_ChannelC4,Input);		//ON/OFF button
	DIO_ConfigChannel(DIO_ChannelD0,Input);		//DOWN button
	DIO_ConfigChannel(DIO_ChannelD1,Input);  //UP button
	GINT_EnableAllInterrupts();
	u8 displaystate=1,set_temp=25,Current_temp=0,ON=0;
     37a:	b1 2c       	mov	r11, r1
     37c:	0f 2e       	mov	r0, r31
     37e:	f9 e1       	ldi	r31, 0x19	; 25
     380:	7f 2e       	mov	r7, r31
     382:	f0 2d       	mov	r31, r0
     384:	aa 24       	eor	r10, r10
     386:	a3 94       	inc	r10
     388:	66 24       	eor	r6, r6
     38a:	63 94       	inc	r6
			ON=0;
			displaystate=1;
			DIO_WriteChannel(DIO_ChannelC3,STD_Low);
			DIO_WriteChannel(DIO_ChannelC2,STD_Low);
			buttonTimer=0;
			eeprom_write_block(setvalue,0,strlen(setvalue));
     38c:	8e 01       	movw	r16, r28
     38e:	0e 5e       	subi	r16, 0xEE	; 238
     390:	1f 4f       	sbci	r17, 0xFF	; 255
				PWM_Generate_COM1B(100);
				ServoMotor(90);
			}
		}
		if(DIO_ReadChannel(DIO_ChannelD0) == STD_High || DIO_ReadChannel(DIO_ChannelD1) == STD_High){
			buttonTimer=4883;
     392:	0f 2e       	mov	r0, r31
     394:	f3 e1       	ldi	r31, 0x13	; 19
     396:	cf 2e       	mov	r12, r31
     398:	dc 2c       	mov	r13, r12
     39a:	e1 2c       	mov	r14, r1
     39c:	f1 2c       	mov	r15, r1
     39e:	f0 2d       	mov	r31, r0
	u8 displaystate=1,set_temp=25,Current_temp=0,ON=0;
	//LCD_String("current temp: ");
	memset(EE_read,0,15);
	while (1)
	{
		if(DIO_ReadChannel(DIO_ChannelC4) == STD_High && ON==0){ //////the power on function
     3a0:	84 e1       	ldi	r24, 0x14	; 20
     3a2:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_ReadChannel>
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	41 f5       	brne	.+80     	; 0x3fa <main+0x124>
     3aa:	b1 10       	cpse	r11, r1
     3ac:	26 c0       	rjmp	.+76     	; 0x3fa <main+0x124>
			LCD_Init();
     3ae:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
			
			displaystate=0;
			ON=1;
			TIMSK=(1<<TOIE0);
     3b2:	69 be       	out	0x39, r6	; 57
			TIMSK |= (1 << TOIE2);      // Enable Timer/Counter2 overflow interrupt
     3b4:	89 b7       	in	r24, 0x39	; 57
     3b6:	80 64       	ori	r24, 0x40	; 64
     3b8:	89 bf       	out	0x39, r24	; 57
			eeprom_read_block(setvalue,0,strlen(setvalue));
     3ba:	f8 01       	movw	r30, r16
     3bc:	01 90       	ld	r0, Z+
     3be:	00 20       	and	r0, r0
     3c0:	e9 f7       	brne	.-6      	; 0x3bc <main+0xe6>
     3c2:	31 97       	sbiw	r30, 0x01	; 1
     3c4:	af 01       	movw	r20, r30
     3c6:	40 1b       	sub	r20, r16
     3c8:	51 0b       	sbc	r21, r17
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	c8 01       	movw	r24, r16
     3d0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <eeprom_read_block>
			LCD_String(setvalue);
     3d4:	c8 01       	movw	r24, r16
     3d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_String>
			DIO_WriteChannel(DIO_ChannelC3,STD_Low);
			DIO_WriteChannel(DIO_ChannelC2,STD_Low);
			buttonTimer=0;
			eeprom_write_block(setvalue,0,strlen(setvalue));
		}
		if (buttonTimer == 0 && ON==1 &&displaystate==0) {
     3da:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <buttonTimer>
     3de:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <buttonTimer+0x1>
     3e2:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <buttonTimer+0x2>
     3e6:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <buttonTimer+0x3>
     3ea:	89 2b       	or	r24, r25
     3ec:	8a 2b       	or	r24, r26
     3ee:	8b 2b       	or	r24, r27
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <main+0x11e>
     3f2:	47 c0       	rjmp	.+142    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
	{
		if(DIO_ReadChannel(DIO_ChannelC4) == STD_High && ON==0){ //////the power on function
			LCD_Init();
			
			displaystate=0;
			ON=1;
     3f4:	b6 2c       	mov	r11, r6
	while (1)
	{
		if(DIO_ReadChannel(DIO_ChannelC4) == STD_High && ON==0){ //////the power on function
			LCD_Init();
			
			displaystate=0;
     3f6:	a1 2c       	mov	r10, r1
     3f8:	ad c0       	rjmp	.+346    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
			TIMSK |= (1 << TOIE2);      // Enable Timer/Counter2 overflow interrupt
			eeprom_read_block(setvalue,0,strlen(setvalue));
			LCD_String(setvalue);
		}
		//s8 state[10];
		else if (DIO_ReadChannel(DIO_ChannelC4)==STD_High && ON==1)/////// the power off function
     3fa:	84 e1       	ldi	r24, 0x14	; 20
     3fc:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_ReadChannel>
     400:	81 30       	cpi	r24, 0x01	; 1
     402:	69 f5       	brne	.+90     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     404:	b1 e0       	ldi	r27, 0x01	; 1
     406:	bb 12       	cpse	r11, r27
     408:	fc c0       	rjmp	.+504    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
		{
			LCD_Cmd(0x08);
     40a:	88 e0       	ldi	r24, 0x08	; 8
     40c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
			TIMSK=(0<<TOIE0);
     410:	19 be       	out	0x39, r1	; 57
			TIMSK |= (0 << TOIE2);
     412:	89 b7       	in	r24, 0x39	; 57
     414:	89 bf       	out	0x39, r24	; 57
			DIO_WriteChannel(DIO_ChannelD2,STD_Low);
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	8a e1       	ldi	r24, 0x1A	; 26
     41a:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
			ON=0;
			displaystate=1;
			DIO_WriteChannel(DIO_ChannelC3,STD_Low);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	83 e1       	ldi	r24, 0x13	; 19
     422:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
			DIO_WriteChannel(DIO_ChannelC2,STD_Low);
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	82 e1       	ldi	r24, 0x12	; 18
     42a:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
			buttonTimer=0;
     42e:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <buttonTimer>
     432:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <buttonTimer+0x1>
     436:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <buttonTimer+0x2>
     43a:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <buttonTimer+0x3>
			eeprom_write_block(setvalue,0,strlen(setvalue));
     43e:	f8 01       	movw	r30, r16
     440:	01 90       	ld	r0, Z+
     442:	00 20       	and	r0, r0
     444:	e9 f7       	brne	.-6      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     446:	31 97       	sbiw	r30, 0x01	; 1
     448:	af 01       	movw	r20, r30
     44a:	40 1b       	sub	r20, r16
     44c:	51 0b       	sbc	r21, r17
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	c8 01       	movw	r24, r16
     454:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <eeprom_write_block>
		{
			LCD_Cmd(0x08);
			TIMSK=(0<<TOIE0);
			TIMSK |= (0 << TOIE2);
			DIO_WriteChannel(DIO_ChannelD2,STD_Low);
			ON=0;
     458:	b1 2c       	mov	r11, r1
			displaystate=1;
     45a:	a6 2c       	mov	r10, r6
     45c:	d2 c0       	rjmp	.+420    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
			DIO_WriteChannel(DIO_ChannelC3,STD_Low);
			DIO_WriteChannel(DIO_ChannelC2,STD_Low);
			buttonTimer=0;
			eeprom_write_block(setvalue,0,strlen(setvalue));
		}
		if (buttonTimer == 0 && ON==1 &&displaystate==0) {
     45e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <buttonTimer>
     462:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <buttonTimer+0x1>
     466:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <buttonTimer+0x2>
     46a:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <buttonTimer+0x3>
     46e:	89 2b       	or	r24, r25
     470:	8a 2b       	or	r24, r26
     472:	8b 2b       	or	r24, r27
     474:	09 f0       	breq	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     476:	6e c0       	rjmp	.+220    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     478:	21 e0       	ldi	r18, 0x01	; 1
     47a:	b2 12       	cpse	r11, r18
     47c:	6b c0       	rjmp	.+214    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     47e:	a1 10       	cpse	r10, r1
     480:	69 c0       	rjmp	.+210    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
			// Exit the temperature setting mode
			// Perform necessary actions here
			// Reset button press count
			Current_temp= ADC_Read(ADC_Channel0);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 87 03 	call	0x70e	; 0x70e <ADC_Read>
			itoa(Current_temp,crtvalue,10);
     488:	5c 01       	movw	r10, r24
     48a:	bb 24       	eor	r11, r11
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     48c:	4a e0       	ldi	r20, 0x0A	; 10
     48e:	be 01       	movw	r22, r28
     490:	68 5f       	subi	r22, 0xF8	; 248
     492:	7f 4f       	sbci	r23, 0xFF	; 255
     494:	c5 01       	movw	r24, r10
     496:	0e 94 9c 08 	call	0x1138	; 0x1138 <__itoa_ncheck>
			
			LCD_String(crtvalue);
     49a:	ce 01       	movw	r24, r28
     49c:	08 96       	adiw	r24, 0x08	; 8
     49e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	93 ec       	ldi	r25, 0xC3	; 195
     4a6:	a9 e0       	ldi	r26, 0x09	; 9
     4a8:	81 50       	subi	r24, 0x01	; 1
     4aa:	90 40       	sbci	r25, 0x00	; 0
     4ac:	a0 40       	sbci	r26, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4b2:	00 00       	nop
			_delay_ms(200);
			LCD_Clear();
     4b4:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Clear>
			if(Current_temp<(set_temp-5)){
     4b8:	87 2c       	mov	r8, r7
     4ba:	91 2c       	mov	r9, r1
     4bc:	c4 01       	movw	r24, r8
     4be:	05 97       	sbiw	r24, 0x05	; 5
     4c0:	a8 16       	cp	r10, r24
     4c2:	b9 06       	cpc	r11, r25
     4c4:	fc f4       	brge	.+62     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
				DIO_WriteChannel(DIO_ChannelC2,STD_High);
     4c6:	66 2d       	mov	r22, r6
     4c8:	82 e1       	ldi	r24, 0x12	; 18
     4ca:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelC3,STD_Low);
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	83 e1       	ldi	r24, 0x13	; 19
     4d2:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelD3,STD_Low);
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	8b e1       	ldi	r24, 0x1B	; 27
     4da:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelD6,STD_Low);
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	8e e1       	ldi	r24, 0x1E	; 30
     4e2:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				PWM_Generate_COM1B(0);
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 14 01 	call	0x228	; 0x228 <PWM_Generate_COM1B>
				ServoMotor(0);
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	cb 01       	movw	r24, r22
     4f2:	0e 94 3d 01 	call	0x27a	; 0x27a <ServoMotor>
				if (flag==1)
     4f6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	19 f4       	brne	.+6      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
				{
					
					DIO_ToggleChannel(DIO_ChannelD2);
     4fe:	8a e1       	ldi	r24, 0x1A	; 26
     500:	0e 94 4e 04 	call	0x89c	; 0x89c <DIO_ToggleChannel>
				}
			}
			if(Current_temp>(set_temp+5)){
     504:	b5 e0       	ldi	r27, 0x05	; 5
     506:	8b 0e       	add	r8, r27
     508:	91 1c       	adc	r9, r1
     50a:	8a 14       	cp	r8, r10
     50c:	9b 04       	cpc	r9, r11
     50e:	04 f5       	brge	.+64     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
				
				DIO_WriteChannel(DIO_ChannelC3,STD_High);
     510:	66 2d       	mov	r22, r6
     512:	83 e1       	ldi	r24, 0x13	; 19
     514:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelC2,STD_Low);
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	82 e1       	ldi	r24, 0x12	; 18
     51c:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelD2,STD_High);
     520:	66 2d       	mov	r22, r6
     522:	8a e1       	ldi	r24, 0x1A	; 26
     524:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelD3,STD_High);
     528:	66 2d       	mov	r22, r6
     52a:	8b e1       	ldi	r24, 0x1B	; 27
     52c:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelD6,STD_Low);
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	8e e1       	ldi	r24, 0x1E	; 30
     534:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				PWM_Generate_COM1B(100);
     538:	84 e6       	ldi	r24, 0x64	; 100
     53a:	0e 94 14 01 	call	0x228	; 0x228 <PWM_Generate_COM1B>
				ServoMotor(90);
     53e:	6a e5       	ldi	r22, 0x5A	; 90
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 3d 01 	call	0x27a	; 0x27a <ServoMotor>
     54a:	b6 2c       	mov	r11, r6
     54c:	a1 2c       	mov	r10, r1
     54e:	02 c0       	rjmp	.+4      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     550:	b6 2c       	mov	r11, r6
     552:	a1 2c       	mov	r10, r1
			}
		}
		if(DIO_ReadChannel(DIO_ChannelD0) == STD_High || DIO_ReadChannel(DIO_ChannelD1) == STD_High){
     554:	88 e1       	ldi	r24, 0x18	; 24
     556:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_ReadChannel>
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	29 f0       	breq	.+10     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
     55e:	89 e1       	ldi	r24, 0x19	; 25
     560:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_ReadChannel>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	41 f4       	brne	.+16     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
			buttonTimer=4883;
     568:	c0 92 ab 00 	sts	0x00AB, r12	; 0x8000ab <buttonTimer>
     56c:	d0 92 ac 00 	sts	0x00AC, r13	; 0x8000ac <buttonTimer+0x1>
     570:	e0 92 ad 00 	sts	0x00AD, r14	; 0x8000ad <buttonTimer+0x2>
     574:	f0 92 ae 00 	sts	0x00AE, r15	; 0x8000ae <buttonTimer+0x3>
		}
		if (buttonTimer>0)
     578:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <buttonTimer>
     57c:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <buttonTimer+0x1>
     580:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <buttonTimer+0x2>
     584:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <buttonTimer+0x3>
     588:	89 2b       	or	r24, r25
     58a:	8a 2b       	or	r24, r26
     58c:	8b 2b       	or	r24, r27
     58e:	09 f4       	brne	.+2      	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
     590:	07 cf       	rjmp	.-498    	; 0x3a0 <main+0xca>
		{
			buttonTimer_2=0;
     592:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <buttonTimer_2>
     596:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <buttonTimer_2+0x1>
     59a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <buttonTimer_2+0x2>
     59e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <buttonTimer_2+0x3>
			if (DIO_ReadChannel(DIO_ChannelD0) == STD_High && set_temp<50 )
     5a2:	88 e1       	ldi	r24, 0x18	; 24
     5a4:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_ReadChannel>
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	49 f4       	brne	.+18     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
     5ac:	21 e3       	ldi	r18, 0x31	; 49
     5ae:	27 15       	cp	r18, r7
     5b0:	30 f0       	brcs	.+12     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
			{
				DIO_WriteChannel(DIO_ChannelD2,STD_Low);
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	8a e1       	ldi	r24, 0x1A	; 26
     5b6:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				set_temp+=5;
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	78 0e       	add	r7, r24
				//LCD_String("Button UP Pressed");
			}
			if (DIO_ReadChannel(DIO_ChannelD1) == STD_High && set_temp>0)
     5be:	89 e1       	ldi	r24, 0x19	; 25
     5c0:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_ReadChannel>
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	41 f4       	brne	.+16     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
     5c8:	77 20       	and	r7, r7
     5ca:	31 f0       	breq	.+12     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
			{
				DIO_WriteChannel(DIO_ChannelD2,STD_Low);
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	8a e1       	ldi	r24, 0x1A	; 26
     5d0:	0e 94 99 03 	call	0x732	; 0x732 <DIO_WriteChannel>
				set_temp-=5;
     5d4:	9b ef       	ldi	r25, 0xFB	; 251
     5d6:	79 0e       	add	r7, r25
     5d8:	4a e0       	ldi	r20, 0x0A	; 10
     5da:	b8 01       	movw	r22, r16
     5dc:	87 2d       	mov	r24, r7
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 9c 08 	call	0x1138	; 0x1138 <__itoa_ncheck>
				//LCD_String("Button DOWN Pressed");
				
			}
			itoa(set_temp,setvalue,10);
			LCD_String(setvalue);
     5e4:	c8 01       	movw	r24, r16
     5e6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_String>
     5ea:	af ef       	ldi	r26, 0xFF	; 255
     5ec:	b3 ec       	ldi	r27, 0xC3	; 195
     5ee:	29 e0       	ldi	r18, 0x09	; 9
     5f0:	a1 50       	subi	r26, 0x01	; 1
     5f2:	b0 40       	sbci	r27, 0x00	; 0
     5f4:	20 40       	sbci	r18, 0x00	; 0
     5f6:	e1 f7       	brne	.-8      	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
     5fa:	00 00       	nop
			_delay_ms(200);
			LCD_Clear();
     5fc:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Clear>
     600:	cf ce       	rjmp	.-610    	; 0x3a0 <main+0xca>
			DIO_WriteChannel(DIO_ChannelC3,STD_Low);
			DIO_WriteChannel(DIO_ChannelC2,STD_Low);
			buttonTimer=0;
			eeprom_write_block(setvalue,0,strlen(setvalue));
		}
		if (buttonTimer == 0 && ON==1 &&displaystate==0) {
     602:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <buttonTimer>
     606:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <buttonTimer+0x1>
     60a:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <buttonTimer+0x2>
     60e:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <buttonTimer+0x3>
     612:	a0 cf       	rjmp	.-192    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>

00000614 <__vector_11>:
			LCD_Clear();
		}
		
	}
}
ISR(TIMER0_OVF_vect) {
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
	// Timer/Counter0 overflow interrupt handler
	if (buttonTimer > 0) {
     626:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <buttonTimer>
     62a:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <buttonTimer+0x1>
     62e:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <buttonTimer+0x2>
     632:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <buttonTimer+0x3>
     636:	89 2b       	or	r24, r25
     638:	8a 2b       	or	r24, r26
     63a:	8b 2b       	or	r24, r27
     63c:	99 f0       	breq	.+38     	; 0x664 <__vector_11+0x50>
		buttonTimer--;
     63e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <buttonTimer>
     642:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <buttonTimer+0x1>
     646:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <buttonTimer+0x2>
     64a:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <buttonTimer+0x3>
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	a1 09       	sbc	r26, r1
     652:	b1 09       	sbc	r27, r1
     654:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <buttonTimer>
     658:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <buttonTimer+0x1>
     65c:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <buttonTimer+0x2>
     660:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <buttonTimer+0x3>
		
	}
}
     664:	bf 91       	pop	r27
     666:	af 91       	pop	r26
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_5>:
ISR(TIMER2_OVF_vect) {
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	2f 93       	push	r18
     682:	8f 93       	push	r24
     684:	9f 93       	push	r25
     686:	af 93       	push	r26
     688:	bf 93       	push	r27
	buttonTimer_2++;
     68a:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <buttonTimer_2>
     68e:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <buttonTimer_2+0x1>
     692:	a0 91 a9 00 	lds	r26, 0x00A9	; 0x8000a9 <buttonTimer_2+0x2>
     696:	b0 91 aa 00 	lds	r27, 0x00AA	; 0x8000aa <buttonTimer_2+0x3>
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	a1 1d       	adc	r26, r1
     69e:	b1 1d       	adc	r27, r1
     6a0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <buttonTimer_2>
     6a4:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <buttonTimer_2+0x1>
     6a8:	a0 93 a9 00 	sts	0x00A9, r26	; 0x8000a9 <buttonTimer_2+0x2>
     6ac:	b0 93 aa 00 	sts	0x00AA, r27	; 0x8000aa <buttonTimer_2+0x3>
	if (buttonTimer_2 == 2000) {
     6b0:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <buttonTimer_2>
     6b4:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <buttonTimer_2+0x1>
     6b8:	a0 91 a9 00 	lds	r26, 0x00A9	; 0x8000a9 <buttonTimer_2+0x2>
     6bc:	b0 91 aa 00 	lds	r27, 0x00AA	; 0x8000aa <buttonTimer_2+0x3>
     6c0:	80 3d       	cpi	r24, 0xD0	; 208
     6c2:	97 40       	sbci	r25, 0x07	; 7
     6c4:	a1 05       	cpc	r26, r1
     6c6:	b1 05       	cpc	r27, r1
     6c8:	69 f4       	brne	.+26     	; 0x6e4 <__vector_5+0x6e>
		TCNT2 = 111; 
     6ca:	8f e6       	ldi	r24, 0x6F	; 111
     6cc:	84 bd       	out	0x24, r24	; 36
		buttonTimer_2=0;
     6ce:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <buttonTimer_2>
     6d2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <buttonTimer_2+0x1>
     6d6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <buttonTimer_2+0x2>
     6da:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <buttonTimer_2+0x3>
		flag=1;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
		
	}
}
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	2f 91       	pop	r18
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <ADC_Init>:
 *  Author: user
 */ 
#include "ADC.h"
#include "LCD.h"

void ADC_Init(ADC_InitTypes * options){
     6f8:	fc 01       	movw	r30, r24
	ADC_ADMUX_Reg = ((options->adcVref)<<6);//set Vref
     6fa:	91 81       	ldd	r25, Z+1	; 0x01
     6fc:	92 95       	swap	r25
     6fe:	99 0f       	add	r25, r25
     700:	99 0f       	add	r25, r25
     702:	90 7c       	andi	r25, 0xC0	; 192
     704:	97 b9       	out	0x07, r25	; 7
	ADC_ADCSRA_Reg = (1<<ADC_ADCSRA_ADEN_Bit)|(options->adcClock);//Enable ADC & Prescaler
     706:	80 81       	ld	r24, Z
     708:	80 68       	ori	r24, 0x80	; 128
     70a:	86 b9       	out	0x06, r24	; 6
     70c:	08 95       	ret

0000070e <ADC_Read>:
}
u16 ADC_Read(ADC_ChannelTypes channelId){
	u16 readValue = 0,celsius=0;
	s8 strvalue[10];
	ADC_ADMUX_Reg = (ADC_ADMUX_Reg & 0b11100000)|(channelId & 0b00011111);
     70e:	97 b1       	in	r25, 0x07	; 7
     710:	90 7e       	andi	r25, 0xE0	; 224
     712:	8f 71       	andi	r24, 0x1F	; 31
     714:	89 2b       	or	r24, r25
     716:	87 b9       	out	0x07, r24	; 7
	SetBit(ADC_ADCSRA_Reg,ADC_ADCSRA_ADSC_Bit);//start Conv.
     718:	36 9a       	sbi	0x06, 6	; 6
	while(GetBit(ADC_ADCSRA_Reg,ADC_ADCSRA_ADIF_Bit) == 0);//Waiting to finish the Conv.
     71a:	34 9b       	sbis	0x06, 4	; 6
     71c:	fe cf       	rjmp	.-4      	; 0x71a <ADC_Read+0xc>
	SetBit(ADC_ADCSRA_Reg,ADC_ADCSRA_ADIF_Bit);//Clear the Flag
     71e:	34 9a       	sbi	0x06, 4	; 6
	readValue = (ADC_ADCL_Reg)|(ADC_ADCH_Reg<<8);
     720:	84 b1       	in	r24, 0x04	; 4
     722:	25 b1       	in	r18, 0x05	; 5
	celsius = readValue/4;
	/*itoa(celsius,strvalue,10);
	LCD_String(strvalue);
	_delay_ms(100);
	LCD_Clear();*/
	return celsius;
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	92 2b       	or	r25, r18
     728:	96 95       	lsr	r25
     72a:	87 95       	ror	r24
     72c:	96 95       	lsr	r25
     72e:	87 95       	ror	r24
     730:	08 95       	ret

00000732 <DIO_WriteChannel>:
*/
#include "DIO.h"

void DIO_WriteChannel(DIO_ChannelTypes channelId,STD_LevelTypes level){
	DIO_PortTypes Portx = channelId/8;
	DIO_ChannelTypes BitNo = channelId%8;
     732:	98 2f       	mov	r25, r24
     734:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
     736:	86 95       	lsr	r24
     738:	86 95       	lsr	r24
     73a:	86 95       	lsr	r24
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	21 f1       	breq	.+72     	; 0x788 <DIO_WriteChannel+0x56>
     740:	30 f0       	brcs	.+12     	; 0x74e <DIO_WriteChannel+0x1c>
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	f1 f1       	breq	.+124    	; 0x7c2 <DIO_WriteChannel+0x90>
     746:	83 30       	cpi	r24, 0x03	; 3
     748:	09 f4       	brne	.+2      	; 0x74c <DIO_WriteChannel+0x1a>
     74a:	58 c0       	rjmp	.+176    	; 0x7fc <DIO_WriteChannel+0xca>
     74c:	08 95       	ret
		case DIO_PortA:
		if (level == STD_High)
     74e:	61 30       	cpi	r22, 0x01	; 1
     750:	69 f4       	brne	.+26     	; 0x76c <DIO_WriteChannel+0x3a>
		{
			SetBit(PORTA_Reg,BitNo);
     752:	4b b3       	in	r20, 0x1b	; 27
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	b9 01       	movw	r22, r18
     75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_WriteChannel+0x2e>
     75c:	66 0f       	add	r22, r22
     75e:	77 1f       	adc	r23, r23
     760:	9a 95       	dec	r25
     762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_WriteChannel+0x2a>
     764:	cb 01       	movw	r24, r22
     766:	84 2b       	or	r24, r20
     768:	8b bb       	out	0x1b, r24	; 27
     76a:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA_Reg,BitNo);
     76c:	4b b3       	in	r20, 0x1b	; 27
     76e:	21 e0       	ldi	r18, 0x01	; 1
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	b9 01       	movw	r22, r18
     774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_WriteChannel+0x48>
     776:	66 0f       	add	r22, r22
     778:	77 1f       	adc	r23, r23
     77a:	9a 95       	dec	r25
     77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_WriteChannel+0x44>
     77e:	cb 01       	movw	r24, r22
     780:	80 95       	com	r24
     782:	84 23       	and	r24, r20
     784:	8b bb       	out	0x1b, r24	; 27
     786:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (level == STD_High)
     788:	61 30       	cpi	r22, 0x01	; 1
     78a:	69 f4       	brne	.+26     	; 0x7a6 <DIO_WriteChannel+0x74>
		{
			SetBit(PORTB_Reg,BitNo);
     78c:	48 b3       	in	r20, 0x18	; 24
     78e:	21 e0       	ldi	r18, 0x01	; 1
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	b9 01       	movw	r22, r18
     794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_WriteChannel+0x68>
     796:	66 0f       	add	r22, r22
     798:	77 1f       	adc	r23, r23
     79a:	9a 95       	dec	r25
     79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_WriteChannel+0x64>
     79e:	cb 01       	movw	r24, r22
     7a0:	84 2b       	or	r24, r20
     7a2:	88 bb       	out	0x18, r24	; 24
     7a4:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB_Reg,BitNo);
     7a6:	48 b3       	in	r20, 0x18	; 24
     7a8:	21 e0       	ldi	r18, 0x01	; 1
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	b9 01       	movw	r22, r18
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_WriteChannel+0x82>
     7b0:	66 0f       	add	r22, r22
     7b2:	77 1f       	adc	r23, r23
     7b4:	9a 95       	dec	r25
     7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_WriteChannel+0x7e>
     7b8:	cb 01       	movw	r24, r22
     7ba:	80 95       	com	r24
     7bc:	84 23       	and	r24, r20
     7be:	88 bb       	out	0x18, r24	; 24
     7c0:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (level == STD_High)
     7c2:	61 30       	cpi	r22, 0x01	; 1
     7c4:	69 f4       	brne	.+26     	; 0x7e0 <DIO_WriteChannel+0xae>
		{
			SetBit(PORTC_Reg,BitNo);
     7c6:	45 b3       	in	r20, 0x15	; 21
     7c8:	21 e0       	ldi	r18, 0x01	; 1
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	b9 01       	movw	r22, r18
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_WriteChannel+0xa2>
     7d0:	66 0f       	add	r22, r22
     7d2:	77 1f       	adc	r23, r23
     7d4:	9a 95       	dec	r25
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_WriteChannel+0x9e>
     7d8:	cb 01       	movw	r24, r22
     7da:	84 2b       	or	r24, r20
     7dc:	85 bb       	out	0x15, r24	; 21
     7de:	08 95       	ret
		}
		else
		{
			ClearBit(PORTC_Reg,BitNo);
     7e0:	45 b3       	in	r20, 0x15	; 21
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	b9 01       	movw	r22, r18
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_WriteChannel+0xbc>
     7ea:	66 0f       	add	r22, r22
     7ec:	77 1f       	adc	r23, r23
     7ee:	9a 95       	dec	r25
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_WriteChannel+0xb8>
     7f2:	cb 01       	movw	r24, r22
     7f4:	80 95       	com	r24
     7f6:	84 23       	and	r24, r20
     7f8:	85 bb       	out	0x15, r24	; 21
     7fa:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (level == STD_High)
     7fc:	61 30       	cpi	r22, 0x01	; 1
     7fe:	69 f4       	brne	.+26     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		{
			SetBit(PORTD_Reg,BitNo);
     800:	42 b3       	in	r20, 0x12	; 18
     802:	21 e0       	ldi	r18, 0x01	; 1
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	b9 01       	movw	r22, r18
     808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80a:	66 0f       	add	r22, r22
     80c:	77 1f       	adc	r23, r23
     80e:	9a 95       	dec	r25
     810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     812:	cb 01       	movw	r24, r22
     814:	84 2b       	or	r24, r20
     816:	82 bb       	out	0x12, r24	; 18
     818:	08 95       	ret
		}
		else
		{
			ClearBit(PORTD_Reg,BitNo);
     81a:	42 b3       	in	r20, 0x12	; 18
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	b9 01       	movw	r22, r18
     822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     824:	66 0f       	add	r22, r22
     826:	77 1f       	adc	r23, r23
     828:	9a 95       	dec	r25
     82a:	e2 f7       	brpl	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     82c:	cb 01       	movw	r24, r22
     82e:	80 95       	com	r24
     830:	84 23       	and	r24, r20
     832:	82 bb       	out	0x12, r24	; 18
     834:	08 95       	ret

00000836 <DIO_ReadChannel>:
		break;
	}
}
STD_LevelTypes DIO_ReadChannel(DIO_ChannelTypes channelId){
	DIO_PortTypes Portx = channelId/8;
	DIO_ChannelTypes BitNo = channelId%8;
     836:	28 2f       	mov	r18, r24
     838:	27 70       	andi	r18, 0x07	; 7
	STD_LevelTypes bitValue = STD_Low;
	switch(Portx){
     83a:	86 95       	lsr	r24
     83c:	86 95       	lsr	r24
     83e:	86 95       	lsr	r24
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	79 f0       	breq	.+30     	; 0x862 <__stack+0x3>
     844:	28 f0       	brcs	.+10     	; 0x850 <DIO_ReadChannel+0x1a>
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	a9 f0       	breq	.+42     	; 0x874 <__stack+0x15>
     84a:	83 30       	cpi	r24, 0x03	; 3
     84c:	e1 f0       	breq	.+56     	; 0x886 <__stack+0x27>
     84e:	24 c0       	rjmp	.+72     	; 0x898 <__stack+0x39>
		case DIO_PortA:
		bitValue = GetBit(PINA_Reg,BitNo);
     850:	89 b3       	in	r24, 0x19	; 25
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_ReadChannel+0x24>
     856:	95 95       	asr	r25
     858:	87 95       	ror	r24
     85a:	2a 95       	dec	r18
     85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_ReadChannel+0x20>
     85e:	81 70       	andi	r24, 0x01	; 1
		break;
     860:	08 95       	ret
		case DIO_PortB:
		bitValue = GetBit(PINB_Reg,BitNo);
     862:	86 b3       	in	r24, 0x16	; 22
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	95 95       	asr	r25
     86a:	87 95       	ror	r24
     86c:	2a 95       	dec	r18
     86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
     870:	81 70       	andi	r24, 0x01	; 1
		break;
     872:	08 95       	ret
		case DIO_PortC:
		bitValue = GetBit(PINC_Reg,BitNo);
     874:	83 b3       	in	r24, 0x13	; 19
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
     87a:	95 95       	asr	r25
     87c:	87 95       	ror	r24
     87e:	2a 95       	dec	r18
     880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
     882:	81 70       	andi	r24, 0x01	; 1
		break;
     884:	08 95       	ret
		case DIO_PortD:
		bitValue = GetBit(PIND_Reg,BitNo);
     886:	80 b3       	in	r24, 0x10	; 16
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
     88c:	95 95       	asr	r25
     88e:	87 95       	ror	r24
     890:	2a 95       	dec	r18
     892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
     894:	81 70       	andi	r24, 0x01	; 1
		break;
     896:	08 95       	ret
	}
}
STD_LevelTypes DIO_ReadChannel(DIO_ChannelTypes channelId){
	DIO_PortTypes Portx = channelId/8;
	DIO_ChannelTypes BitNo = channelId%8;
	STD_LevelTypes bitValue = STD_Low;
     898:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		bitValue = GetBit(PIND_Reg,BitNo);
		break;
	}
	return bitValue;
}
     89a:	08 95       	ret

0000089c <DIO_ToggleChannel>:
void DIO_ToggleChannel(DIO_ChannelTypes channelId){
	DIO_PortTypes Portx = channelId/8;
	DIO_ChannelTypes BitNo = channelId%8;
     89c:	98 2f       	mov	r25, r24
     89e:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
     8a0:	86 95       	lsr	r24
     8a2:	86 95       	lsr	r24
     8a4:	86 95       	lsr	r24
     8a6:	81 30       	cpi	r24, 0x01	; 1
     8a8:	99 f0       	breq	.+38     	; 0x8d0 <DIO_ToggleChannel+0x34>
     8aa:	28 f0       	brcs	.+10     	; 0x8b6 <DIO_ToggleChannel+0x1a>
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	e9 f0       	breq	.+58     	; 0x8ea <DIO_ToggleChannel+0x4e>
     8b0:	83 30       	cpi	r24, 0x03	; 3
     8b2:	41 f1       	breq	.+80     	; 0x904 <DIO_ToggleChannel+0x68>
     8b4:	08 95       	ret
		case DIO_PortA:
		ToggleBit(PORTA_Reg,BitNo);
     8b6:	4b b3       	in	r20, 0x1b	; 27
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	b9 01       	movw	r22, r18
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <DIO_ToggleChannel+0x28>
     8c0:	66 0f       	add	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	9a 95       	dec	r25
     8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <DIO_ToggleChannel+0x24>
     8c8:	cb 01       	movw	r24, r22
     8ca:	84 27       	eor	r24, r20
     8cc:	8b bb       	out	0x1b, r24	; 27
		break;
     8ce:	08 95       	ret
		case DIO_PortB:
		ToggleBit(PORTB_Reg,BitNo);
     8d0:	48 b3       	in	r20, 0x18	; 24
     8d2:	21 e0       	ldi	r18, 0x01	; 1
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	b9 01       	movw	r22, r18
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <DIO_ToggleChannel+0x42>
     8da:	66 0f       	add	r22, r22
     8dc:	77 1f       	adc	r23, r23
     8de:	9a 95       	dec	r25
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <DIO_ToggleChannel+0x3e>
     8e2:	cb 01       	movw	r24, r22
     8e4:	84 27       	eor	r24, r20
     8e6:	88 bb       	out	0x18, r24	; 24
		break;
     8e8:	08 95       	ret
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
     8ea:	45 b3       	in	r20, 0x15	; 21
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	b9 01       	movw	r22, r18
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <DIO_ToggleChannel+0x5c>
     8f4:	66 0f       	add	r22, r22
     8f6:	77 1f       	adc	r23, r23
     8f8:	9a 95       	dec	r25
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <DIO_ToggleChannel+0x58>
     8fc:	cb 01       	movw	r24, r22
     8fe:	84 27       	eor	r24, r20
     900:	85 bb       	out	0x15, r24	; 21
		break;
     902:	08 95       	ret
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
     904:	42 b3       	in	r20, 0x12	; 18
     906:	21 e0       	ldi	r18, 0x01	; 1
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	b9 01       	movw	r22, r18
     90c:	02 c0       	rjmp	.+4      	; 0x912 <DIO_ToggleChannel+0x76>
     90e:	66 0f       	add	r22, r22
     910:	77 1f       	adc	r23, r23
     912:	9a 95       	dec	r25
     914:	e2 f7       	brpl	.-8      	; 0x90e <DIO_ToggleChannel+0x72>
     916:	cb 01       	movw	r24, r22
     918:	84 27       	eor	r24, r20
     91a:	82 bb       	out	0x12, r24	; 18
     91c:	08 95       	ret

0000091e <DIO_ConfigChannel>:
		break;
	}
}
void DIO_ConfigChannel(DIO_ChannelTypes channelId,DIO_DirTypes direction){
	DIO_PortTypes Portx = channelId/8;
	DIO_ChannelTypes BitNo = channelId%8;
     91e:	98 2f       	mov	r25, r24
     920:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
     922:	86 95       	lsr	r24
     924:	86 95       	lsr	r24
     926:	86 95       	lsr	r24
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	21 f1       	breq	.+72     	; 0x974 <DIO_ConfigChannel+0x56>
     92c:	30 f0       	brcs	.+12     	; 0x93a <DIO_ConfigChannel+0x1c>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	f1 f1       	breq	.+124    	; 0x9ae <DIO_ConfigChannel+0x90>
     932:	83 30       	cpi	r24, 0x03	; 3
     934:	09 f4       	brne	.+2      	; 0x938 <DIO_ConfigChannel+0x1a>
     936:	58 c0       	rjmp	.+176    	; 0x9e8 <DIO_ConfigChannel+0xca>
     938:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
     93a:	61 30       	cpi	r22, 0x01	; 1
     93c:	69 f4       	brne	.+26     	; 0x958 <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
     93e:	4a b3       	in	r20, 0x1a	; 26
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	b9 01       	movw	r22, r18
     946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_ConfigChannel+0x2e>
     948:	66 0f       	add	r22, r22
     94a:	77 1f       	adc	r23, r23
     94c:	9a 95       	dec	r25
     94e:	e2 f7       	brpl	.-8      	; 0x948 <DIO_ConfigChannel+0x2a>
     950:	cb 01       	movw	r24, r22
     952:	84 2b       	or	r24, r20
     954:	8a bb       	out	0x1a, r24	; 26
     956:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
     958:	4a b3       	in	r20, 0x1a	; 26
     95a:	21 e0       	ldi	r18, 0x01	; 1
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	b9 01       	movw	r22, r18
     960:	02 c0       	rjmp	.+4      	; 0x966 <DIO_ConfigChannel+0x48>
     962:	66 0f       	add	r22, r22
     964:	77 1f       	adc	r23, r23
     966:	9a 95       	dec	r25
     968:	e2 f7       	brpl	.-8      	; 0x962 <DIO_ConfigChannel+0x44>
     96a:	cb 01       	movw	r24, r22
     96c:	80 95       	com	r24
     96e:	84 23       	and	r24, r20
     970:	8a bb       	out	0x1a, r24	; 26
     972:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (direction == Output)
     974:	61 30       	cpi	r22, 0x01	; 1
     976:	69 f4       	brne	.+26     	; 0x992 <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
     978:	47 b3       	in	r20, 0x17	; 23
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	b9 01       	movw	r22, r18
     980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_ConfigChannel+0x68>
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	9a 95       	dec	r25
     988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_ConfigChannel+0x64>
     98a:	cb 01       	movw	r24, r22
     98c:	84 2b       	or	r24, r20
     98e:	87 bb       	out	0x17, r24	; 23
     990:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
     992:	47 b3       	in	r20, 0x17	; 23
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	b9 01       	movw	r22, r18
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <DIO_ConfigChannel+0x82>
     99c:	66 0f       	add	r22, r22
     99e:	77 1f       	adc	r23, r23
     9a0:	9a 95       	dec	r25
     9a2:	e2 f7       	brpl	.-8      	; 0x99c <DIO_ConfigChannel+0x7e>
     9a4:	cb 01       	movw	r24, r22
     9a6:	80 95       	com	r24
     9a8:	84 23       	and	r24, r20
     9aa:	87 bb       	out	0x17, r24	; 23
     9ac:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (direction == Output)
     9ae:	61 30       	cpi	r22, 0x01	; 1
     9b0:	69 f4       	brne	.+26     	; 0x9cc <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
     9b2:	44 b3       	in	r20, 0x14	; 20
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	b9 01       	movw	r22, r18
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <DIO_ConfigChannel+0xa2>
     9bc:	66 0f       	add	r22, r22
     9be:	77 1f       	adc	r23, r23
     9c0:	9a 95       	dec	r25
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <DIO_ConfigChannel+0x9e>
     9c4:	cb 01       	movw	r24, r22
     9c6:	84 2b       	or	r24, r20
     9c8:	84 bb       	out	0x14, r24	; 20
     9ca:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
     9cc:	44 b3       	in	r20, 0x14	; 20
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	b9 01       	movw	r22, r18
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <DIO_ConfigChannel+0xbc>
     9d6:	66 0f       	add	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	9a 95       	dec	r25
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <DIO_ConfigChannel+0xb8>
     9de:	cb 01       	movw	r24, r22
     9e0:	80 95       	com	r24
     9e2:	84 23       	and	r24, r20
     9e4:	84 bb       	out	0x14, r24	; 20
     9e6:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (direction == Output)
     9e8:	61 30       	cpi	r22, 0x01	; 1
     9ea:	69 f4       	brne	.+26     	; 0xa06 <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
     9ec:	41 b3       	in	r20, 0x11	; 17
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	b9 01       	movw	r22, r18
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <DIO_ConfigChannel+0xdc>
     9f6:	66 0f       	add	r22, r22
     9f8:	77 1f       	adc	r23, r23
     9fa:	9a 95       	dec	r25
     9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <DIO_ConfigChannel+0xd8>
     9fe:	cb 01       	movw	r24, r22
     a00:	84 2b       	or	r24, r20
     a02:	81 bb       	out	0x11, r24	; 17
     a04:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
     a06:	41 b3       	in	r20, 0x11	; 17
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	b9 01       	movw	r22, r18
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <DIO_ConfigChannel+0xf6>
     a10:	66 0f       	add	r22, r22
     a12:	77 1f       	adc	r23, r23
     a14:	9a 95       	dec	r25
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <DIO_ConfigChannel+0xf2>
     a18:	cb 01       	movw	r24, r22
     a1a:	80 95       	com	r24
     a1c:	84 23       	and	r24, r20
     a1e:	81 bb       	out	0x11, r24	; 17
     a20:	08 95       	ret

00000a22 <DIO_WritePort>:
		}
		break;
	}
}
void DIO_WritePort(DIO_PortTypes portId,u8 portValue){
	switch(portId){
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	41 f0       	breq	.+16     	; 0xa36 <DIO_WritePort+0x14>
     a26:	28 f0       	brcs	.+10     	; 0xa32 <DIO_WritePort+0x10>
     a28:	82 30       	cpi	r24, 0x02	; 2
     a2a:	39 f0       	breq	.+14     	; 0xa3a <DIO_WritePort+0x18>
     a2c:	83 30       	cpi	r24, 0x03	; 3
     a2e:	39 f0       	breq	.+14     	; 0xa3e <DIO_WritePort+0x1c>
     a30:	08 95       	ret
		case DIO_PortA:
		PORTA_Reg = portValue;
     a32:	6b bb       	out	0x1b, r22	; 27
		break;
     a34:	08 95       	ret
		case DIO_PortB:
		PORTB_Reg = portValue;
     a36:	68 bb       	out	0x18, r22	; 24
		break;
     a38:	08 95       	ret
		case DIO_PortC:
		PORTC_Reg = portValue;
     a3a:	65 bb       	out	0x15, r22	; 21
		break;
     a3c:	08 95       	ret
		case DIO_PortD:
		PORTD_Reg = portValue;
     a3e:	62 bb       	out	0x12, r22	; 18
     a40:	08 95       	ret

00000a42 <DIO_ReadPort>:
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
	switch(portId){
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	41 f0       	breq	.+16     	; 0xa56 <DIO_ReadPort+0x14>
     a46:	28 f0       	brcs	.+10     	; 0xa52 <DIO_ReadPort+0x10>
     a48:	82 30       	cpi	r24, 0x02	; 2
     a4a:	39 f0       	breq	.+14     	; 0xa5a <DIO_ReadPort+0x18>
     a4c:	83 30       	cpi	r24, 0x03	; 3
     a4e:	39 f0       	breq	.+14     	; 0xa5e <DIO_ReadPort+0x1c>
     a50:	08 c0       	rjmp	.+16     	; 0xa62 <DIO_ReadPort+0x20>
		case DIO_PortA:
		portValue = PORTA_Reg;
     a52:	8b b3       	in	r24, 0x1b	; 27
		break;
     a54:	08 95       	ret
		case DIO_PortB:
		portValue = PORTB_Reg;
     a56:	88 b3       	in	r24, 0x18	; 24
		break;
     a58:	08 95       	ret
		case DIO_PortC:
		portValue = PORTC_Reg;
     a5a:	85 b3       	in	r24, 0x15	; 21
		break;
     a5c:	08 95       	ret
		case DIO_PortD:
		portValue = PORTD_Reg;
     a5e:	82 b3       	in	r24, 0x12	; 18
		break;
     a60:	08 95       	ret
		PORTD_Reg = portValue;
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
     a62:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		portValue = PORTD_Reg;
		break;
	}
	return portValue;
}
     a64:	08 95       	ret

00000a66 <DIO_Init>:
	{Output,STD_High},
	{Output,STD_High},
};


void DIO_Init(){
     a66:	e0 e6       	ldi	r30, 0x60	; 96
     a68:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
     a6a:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg,BitNo);
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
     a6c:	41 e0       	ldi	r20, 0x01	; 1
     a6e:	50 e0       	ldi	r21, 0x00	; 0
	DIO_ChannelTypes BitNo;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
	{
		Portx = count/8;
		BitNo = count%8;
     a70:	28 2f       	mov	r18, r24
     a72:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
     a74:	98 2f       	mov	r25, r24
     a76:	96 95       	lsr	r25
     a78:	96 95       	lsr	r25
     a7a:	96 95       	lsr	r25
     a7c:	91 30       	cpi	r25, 0x01	; 1
     a7e:	09 f1       	breq	.+66     	; 0xac2 <DIO_Init+0x5c>
     a80:	30 f0       	brcs	.+12     	; 0xa8e <DIO_Init+0x28>
     a82:	92 30       	cpi	r25, 0x02	; 2
     a84:	c1 f1       	breq	.+112    	; 0xaf6 <DIO_Init+0x90>
     a86:	93 30       	cpi	r25, 0x03	; 3
     a88:	09 f4       	brne	.+2      	; 0xa8c <DIO_Init+0x26>
     a8a:	4f c0       	rjmp	.+158    	; 0xb2a <DIO_Init+0xc4>
     a8c:	67 c0       	rjmp	.+206    	; 0xb5c <DIO_Init+0xf6>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
     a8e:	90 81       	ld	r25, Z
     a90:	91 30       	cpi	r25, 0x01	; 1
     a92:	59 f4       	brne	.+22     	; 0xaaa <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg,BitNo);
     a94:	9a b3       	in	r25, 0x1a	; 26
     a96:	ba 01       	movw	r22, r20
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <DIO_Init+0x38>
     a9a:	66 0f       	add	r22, r22
     a9c:	77 1f       	adc	r23, r23
     a9e:	2a 95       	dec	r18
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <DIO_Init+0x34>
     aa2:	9b 01       	movw	r18, r22
     aa4:	29 2b       	or	r18, r25
     aa6:	2a bb       	out	0x1a, r18	; 26
     aa8:	59 c0       	rjmp	.+178    	; 0xb5c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
     aaa:	3a b3       	in	r19, 0x1a	; 26
     aac:	ba 01       	movw	r22, r20
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <DIO_Init+0x4e>
     ab0:	66 0f       	add	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	2a 95       	dec	r18
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <DIO_Init+0x4a>
     ab8:	96 2f       	mov	r25, r22
     aba:	90 95       	com	r25
     abc:	93 23       	and	r25, r19
     abe:	9a bb       	out	0x1a, r25	; 26
     ac0:	4d c0       	rjmp	.+154    	; 0xb5c <DIO_Init+0xf6>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
     ac2:	90 81       	ld	r25, Z
     ac4:	91 30       	cpi	r25, 0x01	; 1
     ac6:	59 f4       	brne	.+22     	; 0xade <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg,BitNo);
     ac8:	97 b3       	in	r25, 0x17	; 23
     aca:	ba 01       	movw	r22, r20
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <DIO_Init+0x6c>
     ace:	66 0f       	add	r22, r22
     ad0:	77 1f       	adc	r23, r23
     ad2:	2a 95       	dec	r18
     ad4:	e2 f7       	brpl	.-8      	; 0xace <DIO_Init+0x68>
     ad6:	9b 01       	movw	r18, r22
     ad8:	29 2b       	or	r18, r25
     ada:	27 bb       	out	0x17, r18	; 23
     adc:	3f c0       	rjmp	.+126    	; 0xb5c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
     ade:	37 b3       	in	r19, 0x17	; 23
     ae0:	ba 01       	movw	r22, r20
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_Init+0x82>
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	2a 95       	dec	r18
     aea:	e2 f7       	brpl	.-8      	; 0xae4 <DIO_Init+0x7e>
     aec:	96 2f       	mov	r25, r22
     aee:	90 95       	com	r25
     af0:	93 23       	and	r25, r19
     af2:	97 bb       	out	0x17, r25	; 23
     af4:	33 c0       	rjmp	.+102    	; 0xb5c <DIO_Init+0xf6>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
     af6:	90 81       	ld	r25, Z
     af8:	91 30       	cpi	r25, 0x01	; 1
     afa:	59 f4       	brne	.+22     	; 0xb12 <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg,BitNo);
     afc:	94 b3       	in	r25, 0x14	; 20
     afe:	ba 01       	movw	r22, r20
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <DIO_Init+0xa0>
     b02:	66 0f       	add	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	2a 95       	dec	r18
     b08:	e2 f7       	brpl	.-8      	; 0xb02 <DIO_Init+0x9c>
     b0a:	9b 01       	movw	r18, r22
     b0c:	29 2b       	or	r18, r25
     b0e:	24 bb       	out	0x14, r18	; 20
     b10:	25 c0       	rjmp	.+74     	; 0xb5c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
     b12:	34 b3       	in	r19, 0x14	; 20
     b14:	ba 01       	movw	r22, r20
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_Init+0xb6>
     b18:	66 0f       	add	r22, r22
     b1a:	77 1f       	adc	r23, r23
     b1c:	2a 95       	dec	r18
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_Init+0xb2>
     b20:	96 2f       	mov	r25, r22
     b22:	90 95       	com	r25
     b24:	93 23       	and	r25, r19
     b26:	94 bb       	out	0x14, r25	; 20
     b28:	19 c0       	rjmp	.+50     	; 0xb5c <DIO_Init+0xf6>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
     b2a:	90 81       	ld	r25, Z
     b2c:	91 30       	cpi	r25, 0x01	; 1
     b2e:	59 f4       	brne	.+22     	; 0xb46 <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg,BitNo);
     b30:	91 b3       	in	r25, 0x11	; 17
     b32:	ba 01       	movw	r22, r20
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <DIO_Init+0xd4>
     b36:	66 0f       	add	r22, r22
     b38:	77 1f       	adc	r23, r23
     b3a:	2a 95       	dec	r18
     b3c:	e2 f7       	brpl	.-8      	; 0xb36 <DIO_Init+0xd0>
     b3e:	9b 01       	movw	r18, r22
     b40:	29 2b       	or	r18, r25
     b42:	21 bb       	out	0x11, r18	; 17
     b44:	0b c0       	rjmp	.+22     	; 0xb5c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
     b46:	31 b3       	in	r19, 0x11	; 17
     b48:	ba 01       	movw	r22, r20
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <DIO_Init+0xea>
     b4c:	66 0f       	add	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	2a 95       	dec	r18
     b52:	e2 f7       	brpl	.-8      	; 0xb4c <DIO_Init+0xe6>
     b54:	96 2f       	mov	r25, r22
     b56:	90 95       	com	r25
     b58:	93 23       	and	r25, r19
     b5a:	91 bb       	out	0x11, r25	; 17
void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
     b5c:	8f 5f       	subi	r24, 0xFF	; 255
     b5e:	32 96       	adiw	r30, 0x02	; 2
     b60:	80 32       	cpi	r24, 0x20	; 32
     b62:	09 f0       	breq	.+2      	; 0xb66 <DIO_Init+0x100>
     b64:	85 cf       	rjmp	.-246    	; 0xa70 <DIO_Init+0xa>
			}
			break;
		}
		
	}
     b66:	08 95       	ret

00000b68 <__vector_1>:
		ExtInt2FunPtr = ExtIntFunCopyPtr;
		break;
	}
}

ISR(INT0_vect){
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
	ExtInt0FunPtr();
     b8a:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <ExtInt0FunPtr>
     b8e:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <ExtInt0FunPtr+0x1>
     b92:	09 95       	icall
}
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <__vector_2>:

ISR(INT1_vect){
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	2f 93       	push	r18
     bc2:	3f 93       	push	r19
     bc4:	4f 93       	push	r20
     bc6:	5f 93       	push	r21
     bc8:	6f 93       	push	r22
     bca:	7f 93       	push	r23
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
	ExtInt1FunPtr();
     bd8:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <ExtInt1FunPtr>
     bdc:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <ExtInt1FunPtr+0x1>
     be0:	09 95       	icall
}
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	bf 91       	pop	r27
     be8:	af 91       	pop	r26
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	7f 91       	pop	r23
     bf0:	6f 91       	pop	r22
     bf2:	5f 91       	pop	r21
     bf4:	4f 91       	pop	r20
     bf6:	3f 91       	pop	r19
     bf8:	2f 91       	pop	r18
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <__vector_3>:

ISR(INT2_vect){
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
	ExtInt2FunPtr();
     c26:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <ExtInt2FunPtr>
     c2a:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <ExtInt2FunPtr+0x1>
     c2e:	09 95       	icall
     c30:	ff 91       	pop	r31
     c32:	ef 91       	pop	r30
     c34:	bf 91       	pop	r27
     c36:	af 91       	pop	r26
     c38:	9f 91       	pop	r25
     c3a:	8f 91       	pop	r24
     c3c:	7f 91       	pop	r23
     c3e:	6f 91       	pop	r22
     c40:	5f 91       	pop	r21
     c42:	4f 91       	pop	r20
     c44:	3f 91       	pop	r19
     c46:	2f 91       	pop	r18
     c48:	0f 90       	pop	r0
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	0f 90       	pop	r0
     c4e:	1f 90       	pop	r1
     c50:	18 95       	reti

00000c52 <GINT_EnableAllInterrupts>:
 *  Author: user
 */ 
#include "GINT.h"

void GINT_EnableAllInterrupts(void){
	SetBit(GINT_SREG_Reg,GINT_SREG_IBit);
     c52:	8f b7       	in	r24, 0x3f	; 63
     c54:	80 68       	ori	r24, 0x80	; 128
     c56:	8f bf       	out	0x3f, r24	; 63
     c58:	08 95       	ret

00000c5a <TIMER1_Init>:
#include "TIMER1.h"
#include "LCD.h"

void (*Timer1TOVIntFunPtr)(void) = 0;

void TIMER1_Init(TIMER1_InitTypes * options){
     c5a:	fc 01       	movw	r30, r24
	switch(options->mode){
     c5c:	80 81       	ld	r24, Z
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	99 f0       	breq	.+38     	; 0xc88 <TIMER1_Init+0x2e>
     c62:	28 f0       	brcs	.+10     	; 0xc6e <TIMER1_Init+0x14>
     c64:	82 30       	cpi	r24, 0x02	; 2
     c66:	e9 f0       	breq	.+58     	; 0xca2 <TIMER1_Init+0x48>
     c68:	83 30       	cpi	r24, 0x03	; 3
     c6a:	41 f1       	breq	.+80     	; 0xcbc <TIMER1_Init+0x62>
     c6c:	33 c0       	rjmp	.+102    	; 0xcd4 <TIMER1_Init+0x7a>
		case Normal:
		TIMER1_TCCR1A_Reg.Bits.WGM10_Bit = 0;
     c6e:	8f b5       	in	r24, 0x2f	; 47
     c70:	8e 7f       	andi	r24, 0xFE	; 254
     c72:	8f bd       	out	0x2f, r24	; 47
		TIMER1_TCCR1A_Reg.Bits.WGM11_Bit = 0;
     c74:	8f b5       	in	r24, 0x2f	; 47
     c76:	8d 7f       	andi	r24, 0xFD	; 253
     c78:	8f bd       	out	0x2f, r24	; 47
		TIMER1_TCCR1B_Reg.Bits.WGM12_Bit = 0;
     c7a:	8e b5       	in	r24, 0x2e	; 46
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	8e bd       	out	0x2e, r24	; 46
		TIMER1_TCCR1B_Reg.Bits.WGM13_Bit = 0;
     c80:	8e b5       	in	r24, 0x2e	; 46
     c82:	8f 7e       	andi	r24, 0xEF	; 239
     c84:	8e bd       	out	0x2e, r24	; 46
		break;
     c86:	26 c0       	rjmp	.+76     	; 0xcd4 <TIMER1_Init+0x7a>
		case CTC:
		TIMER1_TCCR1A_Reg.Bits.WGM10_Bit = 0;
     c88:	8f b5       	in	r24, 0x2f	; 47
     c8a:	8e 7f       	andi	r24, 0xFE	; 254
     c8c:	8f bd       	out	0x2f, r24	; 47
		TIMER1_TCCR1A_Reg.Bits.WGM11_Bit = 0;
     c8e:	8f b5       	in	r24, 0x2f	; 47
     c90:	8d 7f       	andi	r24, 0xFD	; 253
     c92:	8f bd       	out	0x2f, r24	; 47
		TIMER1_TCCR1B_Reg.Bits.WGM12_Bit = 1;
     c94:	8e b5       	in	r24, 0x2e	; 46
     c96:	88 60       	ori	r24, 0x08	; 8
     c98:	8e bd       	out	0x2e, r24	; 46
		TIMER1_TCCR1B_Reg.Bits.WGM13_Bit = 0;
     c9a:	8e b5       	in	r24, 0x2e	; 46
     c9c:	8f 7e       	andi	r24, 0xEF	; 239
     c9e:	8e bd       	out	0x2e, r24	; 46
		break;
     ca0:	19 c0       	rjmp	.+50     	; 0xcd4 <TIMER1_Init+0x7a>
		case PWM_Fast:
		TIMER1_TCCR1A_Reg.Bits.WGM10_Bit = 0;
     ca2:	8f b5       	in	r24, 0x2f	; 47
     ca4:	8e 7f       	andi	r24, 0xFE	; 254
     ca6:	8f bd       	out	0x2f, r24	; 47
		TIMER1_TCCR1A_Reg.Bits.WGM11_Bit = 1;
     ca8:	8f b5       	in	r24, 0x2f	; 47
     caa:	82 60       	ori	r24, 0x02	; 2
     cac:	8f bd       	out	0x2f, r24	; 47
		TIMER1_TCCR1B_Reg.Bits.WGM12_Bit = 1;
     cae:	8e b5       	in	r24, 0x2e	; 46
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	8e bd       	out	0x2e, r24	; 46
		TIMER1_TCCR1B_Reg.Bits.WGM13_Bit = 1;
     cb4:	8e b5       	in	r24, 0x2e	; 46
     cb6:	80 61       	ori	r24, 0x10	; 16
     cb8:	8e bd       	out	0x2e, r24	; 46
		break;
     cba:	0c c0       	rjmp	.+24     	; 0xcd4 <TIMER1_Init+0x7a>
		case PWM_PhaseCorrect:
		TIMER1_TCCR1A_Reg.Bits.WGM10_Bit = 0;
     cbc:	8f b5       	in	r24, 0x2f	; 47
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	8f bd       	out	0x2f, r24	; 47
		TIMER1_TCCR1A_Reg.Bits.WGM11_Bit = 1;
     cc2:	8f b5       	in	r24, 0x2f	; 47
     cc4:	82 60       	ori	r24, 0x02	; 2
     cc6:	8f bd       	out	0x2f, r24	; 47
		TIMER1_TCCR1B_Reg.Bits.WGM12_Bit = 0;
     cc8:	8e b5       	in	r24, 0x2e	; 46
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	8e bd       	out	0x2e, r24	; 46
		TIMER1_TCCR1B_Reg.Bits.WGM13_Bit = 1;
     cce:	8e b5       	in	r24, 0x2e	; 46
     cd0:	80 61       	ori	r24, 0x10	; 16
     cd2:	8e bd       	out	0x2e, r24	; 46
		break;
	}
	TIMER1_TCCR1B_Reg.AllRegister |= ((options->prescaling)<<0);
     cd4:	9e b5       	in	r25, 0x2e	; 46
     cd6:	81 81       	ldd	r24, Z+1	; 0x01
     cd8:	89 2b       	or	r24, r25
     cda:	8e bd       	out	0x2e, r24	; 46
	TIMER1_TCCR1A_Reg.AllRegister |= ((options->COM1AMode)<<6);
     cdc:	2f b5       	in	r18, 0x2f	; 47
     cde:	92 81       	ldd	r25, Z+2	; 0x02
     ce0:	30 e4       	ldi	r19, 0x40	; 64
     ce2:	93 9f       	mul	r25, r19
     ce4:	c0 01       	movw	r24, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	82 2b       	or	r24, r18
     cea:	8f bd       	out	0x2f, r24	; 47
	TIMER1_TCCR1A_Reg.AllRegister |= ((options->COM1BMode)<<4);
     cec:	2f b5       	in	r18, 0x2f	; 47
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	40 e1       	ldi	r20, 0x10	; 16
     cf2:	94 9f       	mul	r25, r20
     cf4:	c0 01       	movw	r24, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	82 2b       	or	r24, r18
     cfa:	8f bd       	out	0x2f, r24	; 47
	TIMER1_TIMSK_Reg |= ((options->TOVInt_Status)<<4);
     cfc:	29 b7       	in	r18, 0x39	; 57
     cfe:	3a b7       	in	r19, 0x3a	; 58
     d00:	84 81       	ldd	r24, Z+4	; 0x04
     d02:	40 e1       	ldi	r20, 0x10	; 16
     d04:	84 9f       	mul	r24, r20
     d06:	c0 01       	movw	r24, r0
     d08:	11 24       	eor	r1, r1
     d0a:	82 2b       	or	r24, r18
     d0c:	93 2b       	or	r25, r19
     d0e:	9a bf       	out	0x3a, r25	; 58
     d10:	89 bf       	out	0x39, r24	; 57
     d12:	08 95       	ret

00000d14 <TIMER1_OCR1A_SetValue>:
	
}
void TIMER1_OCR1A_SetValue(u16 value){
	TIMER1_OCR1A_Reg = value;
     d14:	9b bd       	out	0x2b, r25	; 43
     d16:	8a bd       	out	0x2a, r24	; 42
     d18:	08 95       	ret

00000d1a <TIMER1_OCR1B_SetValue>:
}
void TIMER1_OCR1B_SetValue(u16 value){
	TIMER1_OCR1B_Reg = value;
     d1a:	99 bd       	out	0x29, r25	; 41
     d1c:	88 bd       	out	0x28, r24	; 40
     d1e:	08 95       	ret

00000d20 <TIMER1_ICR1_SetValue>:
}
void TIMER1_ICR1_SetValue(u16 value){
	TIMER1_ICR1_Reg = value;
     d20:	97 bd       	out	0x27, r25	; 39
     d22:	86 bd       	out	0x26, r24	; 38
     d24:	08 95       	ret

00000d26 <__subsf3>:
     d26:	50 58       	subi	r21, 0x80	; 128

00000d28 <__addsf3>:
     d28:	bb 27       	eor	r27, r27
     d2a:	aa 27       	eor	r26, r26
     d2c:	0e 94 ab 06 	call	0xd56	; 0xd56 <__addsf3x>
     d30:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_round>
     d34:	0e 94 e7 07 	call	0xfce	; 0xfce <__fp_pscA>
     d38:	38 f0       	brcs	.+14     	; 0xd48 <__addsf3+0x20>
     d3a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__fp_pscB>
     d3e:	20 f0       	brcs	.+8      	; 0xd48 <__addsf3+0x20>
     d40:	39 f4       	brne	.+14     	; 0xd50 <__addsf3+0x28>
     d42:	9f 3f       	cpi	r25, 0xFF	; 255
     d44:	19 f4       	brne	.+6      	; 0xd4c <__addsf3+0x24>
     d46:	26 f4       	brtc	.+8      	; 0xd50 <__addsf3+0x28>
     d48:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_nan>
     d4c:	0e f4       	brtc	.+2      	; 0xd50 <__addsf3+0x28>
     d4e:	e0 95       	com	r30
     d50:	e7 fb       	bst	r30, 7
     d52:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_inf>

00000d56 <__addsf3x>:
     d56:	e9 2f       	mov	r30, r25
     d58:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_split3>
     d5c:	58 f3       	brcs	.-42     	; 0xd34 <__addsf3+0xc>
     d5e:	ba 17       	cp	r27, r26
     d60:	62 07       	cpc	r22, r18
     d62:	73 07       	cpc	r23, r19
     d64:	84 07       	cpc	r24, r20
     d66:	95 07       	cpc	r25, r21
     d68:	20 f0       	brcs	.+8      	; 0xd72 <__addsf3x+0x1c>
     d6a:	79 f4       	brne	.+30     	; 0xd8a <__addsf3x+0x34>
     d6c:	a6 f5       	brtc	.+104    	; 0xdd6 <__addsf3x+0x80>
     d6e:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_zero>
     d72:	0e f4       	brtc	.+2      	; 0xd76 <__addsf3x+0x20>
     d74:	e0 95       	com	r30
     d76:	0b 2e       	mov	r0, r27
     d78:	ba 2f       	mov	r27, r26
     d7a:	a0 2d       	mov	r26, r0
     d7c:	0b 01       	movw	r0, r22
     d7e:	b9 01       	movw	r22, r18
     d80:	90 01       	movw	r18, r0
     d82:	0c 01       	movw	r0, r24
     d84:	ca 01       	movw	r24, r20
     d86:	a0 01       	movw	r20, r0
     d88:	11 24       	eor	r1, r1
     d8a:	ff 27       	eor	r31, r31
     d8c:	59 1b       	sub	r21, r25
     d8e:	99 f0       	breq	.+38     	; 0xdb6 <__addsf3x+0x60>
     d90:	59 3f       	cpi	r21, 0xF9	; 249
     d92:	50 f4       	brcc	.+20     	; 0xda8 <__addsf3x+0x52>
     d94:	50 3e       	cpi	r21, 0xE0	; 224
     d96:	68 f1       	brcs	.+90     	; 0xdf2 <__addsf3x+0x9c>
     d98:	1a 16       	cp	r1, r26
     d9a:	f0 40       	sbci	r31, 0x00	; 0
     d9c:	a2 2f       	mov	r26, r18
     d9e:	23 2f       	mov	r18, r19
     da0:	34 2f       	mov	r19, r20
     da2:	44 27       	eor	r20, r20
     da4:	58 5f       	subi	r21, 0xF8	; 248
     da6:	f3 cf       	rjmp	.-26     	; 0xd8e <__addsf3x+0x38>
     da8:	46 95       	lsr	r20
     daa:	37 95       	ror	r19
     dac:	27 95       	ror	r18
     dae:	a7 95       	ror	r26
     db0:	f0 40       	sbci	r31, 0x00	; 0
     db2:	53 95       	inc	r21
     db4:	c9 f7       	brne	.-14     	; 0xda8 <__addsf3x+0x52>
     db6:	7e f4       	brtc	.+30     	; 0xdd6 <__addsf3x+0x80>
     db8:	1f 16       	cp	r1, r31
     dba:	ba 0b       	sbc	r27, r26
     dbc:	62 0b       	sbc	r22, r18
     dbe:	73 0b       	sbc	r23, r19
     dc0:	84 0b       	sbc	r24, r20
     dc2:	ba f0       	brmi	.+46     	; 0xdf2 <__addsf3x+0x9c>
     dc4:	91 50       	subi	r25, 0x01	; 1
     dc6:	a1 f0       	breq	.+40     	; 0xdf0 <__addsf3x+0x9a>
     dc8:	ff 0f       	add	r31, r31
     dca:	bb 1f       	adc	r27, r27
     dcc:	66 1f       	adc	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	88 1f       	adc	r24, r24
     dd2:	c2 f7       	brpl	.-16     	; 0xdc4 <__addsf3x+0x6e>
     dd4:	0e c0       	rjmp	.+28     	; 0xdf2 <__addsf3x+0x9c>
     dd6:	ba 0f       	add	r27, r26
     dd8:	62 1f       	adc	r22, r18
     dda:	73 1f       	adc	r23, r19
     ddc:	84 1f       	adc	r24, r20
     dde:	48 f4       	brcc	.+18     	; 0xdf2 <__addsf3x+0x9c>
     de0:	87 95       	ror	r24
     de2:	77 95       	ror	r23
     de4:	67 95       	ror	r22
     de6:	b7 95       	ror	r27
     de8:	f7 95       	ror	r31
     dea:	9e 3f       	cpi	r25, 0xFE	; 254
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <__addsf3x+0x9a>
     dee:	b0 cf       	rjmp	.-160    	; 0xd50 <__addsf3+0x28>
     df0:	93 95       	inc	r25
     df2:	88 0f       	add	r24, r24
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <__addsf3x+0xa2>
     df6:	99 27       	eor	r25, r25
     df8:	ee 0f       	add	r30, r30
     dfa:	97 95       	ror	r25
     dfc:	87 95       	ror	r24
     dfe:	08 95       	ret

00000e00 <__divsf3>:
     e00:	0e 94 14 07 	call	0xe28	; 0xe28 <__divsf3x>
     e04:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_round>
     e08:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__fp_pscB>
     e0c:	58 f0       	brcs	.+22     	; 0xe24 <__divsf3+0x24>
     e0e:	0e 94 e7 07 	call	0xfce	; 0xfce <__fp_pscA>
     e12:	40 f0       	brcs	.+16     	; 0xe24 <__divsf3+0x24>
     e14:	29 f4       	brne	.+10     	; 0xe20 <__divsf3+0x20>
     e16:	5f 3f       	cpi	r21, 0xFF	; 255
     e18:	29 f0       	breq	.+10     	; 0xe24 <__divsf3+0x24>
     e1a:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_inf>
     e1e:	51 11       	cpse	r21, r1
     e20:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_szero>
     e24:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_nan>

00000e28 <__divsf3x>:
     e28:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_split3>
     e2c:	68 f3       	brcs	.-38     	; 0xe08 <__divsf3+0x8>

00000e2e <__divsf3_pse>:
     e2e:	99 23       	and	r25, r25
     e30:	b1 f3       	breq	.-20     	; 0xe1e <__divsf3+0x1e>
     e32:	55 23       	and	r21, r21
     e34:	91 f3       	breq	.-28     	; 0xe1a <__divsf3+0x1a>
     e36:	95 1b       	sub	r25, r21
     e38:	55 0b       	sbc	r21, r21
     e3a:	bb 27       	eor	r27, r27
     e3c:	aa 27       	eor	r26, r26
     e3e:	62 17       	cp	r22, r18
     e40:	73 07       	cpc	r23, r19
     e42:	84 07       	cpc	r24, r20
     e44:	38 f0       	brcs	.+14     	; 0xe54 <__divsf3_pse+0x26>
     e46:	9f 5f       	subi	r25, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	44 1f       	adc	r20, r20
     e50:	aa 1f       	adc	r26, r26
     e52:	a9 f3       	breq	.-22     	; 0xe3e <__divsf3_pse+0x10>
     e54:	35 d0       	rcall	.+106    	; 0xec0 <__divsf3_pse+0x92>
     e56:	0e 2e       	mov	r0, r30
     e58:	3a f0       	brmi	.+14     	; 0xe68 <__divsf3_pse+0x3a>
     e5a:	e0 e8       	ldi	r30, 0x80	; 128
     e5c:	32 d0       	rcall	.+100    	; 0xec2 <__divsf3_pse+0x94>
     e5e:	91 50       	subi	r25, 0x01	; 1
     e60:	50 40       	sbci	r21, 0x00	; 0
     e62:	e6 95       	lsr	r30
     e64:	00 1c       	adc	r0, r0
     e66:	ca f7       	brpl	.-14     	; 0xe5a <__divsf3_pse+0x2c>
     e68:	2b d0       	rcall	.+86     	; 0xec0 <__divsf3_pse+0x92>
     e6a:	fe 2f       	mov	r31, r30
     e6c:	29 d0       	rcall	.+82     	; 0xec0 <__divsf3_pse+0x92>
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	bb 1f       	adc	r27, r27
     e76:	26 17       	cp	r18, r22
     e78:	37 07       	cpc	r19, r23
     e7a:	48 07       	cpc	r20, r24
     e7c:	ab 07       	cpc	r26, r27
     e7e:	b0 e8       	ldi	r27, 0x80	; 128
     e80:	09 f0       	breq	.+2      	; 0xe84 <__divsf3_pse+0x56>
     e82:	bb 0b       	sbc	r27, r27
     e84:	80 2d       	mov	r24, r0
     e86:	bf 01       	movw	r22, r30
     e88:	ff 27       	eor	r31, r31
     e8a:	93 58       	subi	r25, 0x83	; 131
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	3a f0       	brmi	.+14     	; 0xe9e <__divsf3_pse+0x70>
     e90:	9e 3f       	cpi	r25, 0xFE	; 254
     e92:	51 05       	cpc	r21, r1
     e94:	78 f0       	brcs	.+30     	; 0xeb4 <__divsf3_pse+0x86>
     e96:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_inf>
     e9a:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_szero>
     e9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ea0:	e4 f3       	brlt	.-8      	; 0xe9a <__divsf3_pse+0x6c>
     ea2:	98 3e       	cpi	r25, 0xE8	; 232
     ea4:	d4 f3       	brlt	.-12     	; 0xe9a <__divsf3_pse+0x6c>
     ea6:	86 95       	lsr	r24
     ea8:	77 95       	ror	r23
     eaa:	67 95       	ror	r22
     eac:	b7 95       	ror	r27
     eae:	f7 95       	ror	r31
     eb0:	9f 5f       	subi	r25, 0xFF	; 255
     eb2:	c9 f7       	brne	.-14     	; 0xea6 <__divsf3_pse+0x78>
     eb4:	88 0f       	add	r24, r24
     eb6:	91 1d       	adc	r25, r1
     eb8:	96 95       	lsr	r25
     eba:	87 95       	ror	r24
     ebc:	97 f9       	bld	r25, 7
     ebe:	08 95       	ret
     ec0:	e1 e0       	ldi	r30, 0x01	; 1
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	bb 1f       	adc	r27, r27
     eca:	62 17       	cp	r22, r18
     ecc:	73 07       	cpc	r23, r19
     ece:	84 07       	cpc	r24, r20
     ed0:	ba 07       	cpc	r27, r26
     ed2:	20 f0       	brcs	.+8      	; 0xedc <__divsf3_pse+0xae>
     ed4:	62 1b       	sub	r22, r18
     ed6:	73 0b       	sbc	r23, r19
     ed8:	84 0b       	sbc	r24, r20
     eda:	ba 0b       	sbc	r27, r26
     edc:	ee 1f       	adc	r30, r30
     ede:	88 f7       	brcc	.-30     	; 0xec2 <__divsf3_pse+0x94>
     ee0:	e0 95       	com	r30
     ee2:	08 95       	ret

00000ee4 <__fixunssfsi>:
     ee4:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_splitA>
     ee8:	88 f0       	brcs	.+34     	; 0xf0c <__fixunssfsi+0x28>
     eea:	9f 57       	subi	r25, 0x7F	; 127
     eec:	98 f0       	brcs	.+38     	; 0xf14 <__fixunssfsi+0x30>
     eee:	b9 2f       	mov	r27, r25
     ef0:	99 27       	eor	r25, r25
     ef2:	b7 51       	subi	r27, 0x17	; 23
     ef4:	b0 f0       	brcs	.+44     	; 0xf22 <__fixunssfsi+0x3e>
     ef6:	e1 f0       	breq	.+56     	; 0xf30 <__fixunssfsi+0x4c>
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	1a f0       	brmi	.+6      	; 0xf08 <__fixunssfsi+0x24>
     f02:	ba 95       	dec	r27
     f04:	c9 f7       	brne	.-14     	; 0xef8 <__fixunssfsi+0x14>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <__fixunssfsi+0x4c>
     f08:	b1 30       	cpi	r27, 0x01	; 1
     f0a:	91 f0       	breq	.+36     	; 0xf30 <__fixunssfsi+0x4c>
     f0c:	0e 94 28 08 	call	0x1050	; 0x1050 <__fp_zero>
     f10:	b1 e0       	ldi	r27, 0x01	; 1
     f12:	08 95       	ret
     f14:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_zero>
     f18:	67 2f       	mov	r22, r23
     f1a:	78 2f       	mov	r23, r24
     f1c:	88 27       	eor	r24, r24
     f1e:	b8 5f       	subi	r27, 0xF8	; 248
     f20:	39 f0       	breq	.+14     	; 0xf30 <__fixunssfsi+0x4c>
     f22:	b9 3f       	cpi	r27, 0xF9	; 249
     f24:	cc f3       	brlt	.-14     	; 0xf18 <__fixunssfsi+0x34>
     f26:	86 95       	lsr	r24
     f28:	77 95       	ror	r23
     f2a:	67 95       	ror	r22
     f2c:	b3 95       	inc	r27
     f2e:	d9 f7       	brne	.-10     	; 0xf26 <__fixunssfsi+0x42>
     f30:	3e f4       	brtc	.+14     	; 0xf40 <__fixunssfsi+0x5c>
     f32:	90 95       	com	r25
     f34:	80 95       	com	r24
     f36:	70 95       	com	r23
     f38:	61 95       	neg	r22
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	08 95       	ret

00000f42 <__floatunsisf>:
     f42:	e8 94       	clt
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <__floatsisf+0x12>

00000f46 <__floatsisf>:
     f46:	97 fb       	bst	r25, 7
     f48:	3e f4       	brtc	.+14     	; 0xf58 <__floatsisf+0x12>
     f4a:	90 95       	com	r25
     f4c:	80 95       	com	r24
     f4e:	70 95       	com	r23
     f50:	61 95       	neg	r22
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	8f 4f       	sbci	r24, 0xFF	; 255
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	99 23       	and	r25, r25
     f5a:	a9 f0       	breq	.+42     	; 0xf86 <__floatsisf+0x40>
     f5c:	f9 2f       	mov	r31, r25
     f5e:	96 e9       	ldi	r25, 0x96	; 150
     f60:	bb 27       	eor	r27, r27
     f62:	93 95       	inc	r25
     f64:	f6 95       	lsr	r31
     f66:	87 95       	ror	r24
     f68:	77 95       	ror	r23
     f6a:	67 95       	ror	r22
     f6c:	b7 95       	ror	r27
     f6e:	f1 11       	cpse	r31, r1
     f70:	f8 cf       	rjmp	.-16     	; 0xf62 <__floatsisf+0x1c>
     f72:	fa f4       	brpl	.+62     	; 0xfb2 <__floatsisf+0x6c>
     f74:	bb 0f       	add	r27, r27
     f76:	11 f4       	brne	.+4      	; 0xf7c <__floatsisf+0x36>
     f78:	60 ff       	sbrs	r22, 0
     f7a:	1b c0       	rjmp	.+54     	; 0xfb2 <__floatsisf+0x6c>
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	16 c0       	rjmp	.+44     	; 0xfb2 <__floatsisf+0x6c>
     f86:	88 23       	and	r24, r24
     f88:	11 f0       	breq	.+4      	; 0xf8e <__floatsisf+0x48>
     f8a:	96 e9       	ldi	r25, 0x96	; 150
     f8c:	11 c0       	rjmp	.+34     	; 0xfb0 <__floatsisf+0x6a>
     f8e:	77 23       	and	r23, r23
     f90:	21 f0       	breq	.+8      	; 0xf9a <__floatsisf+0x54>
     f92:	9e e8       	ldi	r25, 0x8E	; 142
     f94:	87 2f       	mov	r24, r23
     f96:	76 2f       	mov	r23, r22
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__floatsisf+0x5e>
     f9a:	66 23       	and	r22, r22
     f9c:	71 f0       	breq	.+28     	; 0xfba <__floatsisf+0x74>
     f9e:	96 e8       	ldi	r25, 0x86	; 134
     fa0:	86 2f       	mov	r24, r22
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	2a f0       	brmi	.+10     	; 0xfb2 <__floatsisf+0x6c>
     fa8:	9a 95       	dec	r25
     faa:	66 0f       	add	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	88 1f       	adc	r24, r24
     fb0:	da f7       	brpl	.-10     	; 0xfa8 <__floatsisf+0x62>
     fb2:	88 0f       	add	r24, r24
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret

00000fbc <__fp_inf>:
     fbc:	97 f9       	bld	r25, 7
     fbe:	9f 67       	ori	r25, 0x7F	; 127
     fc0:	80 e8       	ldi	r24, 0x80	; 128
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	08 95       	ret

00000fc8 <__fp_nan>:
     fc8:	9f ef       	ldi	r25, 0xFF	; 255
     fca:	80 ec       	ldi	r24, 0xC0	; 192
     fcc:	08 95       	ret

00000fce <__fp_pscA>:
     fce:	00 24       	eor	r0, r0
     fd0:	0a 94       	dec	r0
     fd2:	16 16       	cp	r1, r22
     fd4:	17 06       	cpc	r1, r23
     fd6:	18 06       	cpc	r1, r24
     fd8:	09 06       	cpc	r0, r25
     fda:	08 95       	ret

00000fdc <__fp_pscB>:
     fdc:	00 24       	eor	r0, r0
     fde:	0a 94       	dec	r0
     fe0:	12 16       	cp	r1, r18
     fe2:	13 06       	cpc	r1, r19
     fe4:	14 06       	cpc	r1, r20
     fe6:	05 06       	cpc	r0, r21
     fe8:	08 95       	ret

00000fea <__fp_round>:
     fea:	09 2e       	mov	r0, r25
     fec:	03 94       	inc	r0
     fee:	00 0c       	add	r0, r0
     ff0:	11 f4       	brne	.+4      	; 0xff6 <__fp_round+0xc>
     ff2:	88 23       	and	r24, r24
     ff4:	52 f0       	brmi	.+20     	; 0x100a <__fp_round+0x20>
     ff6:	bb 0f       	add	r27, r27
     ff8:	40 f4       	brcc	.+16     	; 0x100a <__fp_round+0x20>
     ffa:	bf 2b       	or	r27, r31
     ffc:	11 f4       	brne	.+4      	; 0x1002 <__fp_round+0x18>
     ffe:	60 ff       	sbrs	r22, 0
    1000:	04 c0       	rjmp	.+8      	; 0x100a <__fp_round+0x20>
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	8f 4f       	sbci	r24, 0xFF	; 255
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	08 95       	ret

0000100c <__fp_split3>:
    100c:	57 fd       	sbrc	r21, 7
    100e:	90 58       	subi	r25, 0x80	; 128
    1010:	44 0f       	add	r20, r20
    1012:	55 1f       	adc	r21, r21
    1014:	59 f0       	breq	.+22     	; 0x102c <__fp_splitA+0x10>
    1016:	5f 3f       	cpi	r21, 0xFF	; 255
    1018:	71 f0       	breq	.+28     	; 0x1036 <__fp_splitA+0x1a>
    101a:	47 95       	ror	r20

0000101c <__fp_splitA>:
    101c:	88 0f       	add	r24, r24
    101e:	97 fb       	bst	r25, 7
    1020:	99 1f       	adc	r25, r25
    1022:	61 f0       	breq	.+24     	; 0x103c <__fp_splitA+0x20>
    1024:	9f 3f       	cpi	r25, 0xFF	; 255
    1026:	79 f0       	breq	.+30     	; 0x1046 <__fp_splitA+0x2a>
    1028:	87 95       	ror	r24
    102a:	08 95       	ret
    102c:	12 16       	cp	r1, r18
    102e:	13 06       	cpc	r1, r19
    1030:	14 06       	cpc	r1, r20
    1032:	55 1f       	adc	r21, r21
    1034:	f2 cf       	rjmp	.-28     	; 0x101a <__fp_split3+0xe>
    1036:	46 95       	lsr	r20
    1038:	f1 df       	rcall	.-30     	; 0x101c <__fp_splitA>
    103a:	08 c0       	rjmp	.+16     	; 0x104c <__fp_splitA+0x30>
    103c:	16 16       	cp	r1, r22
    103e:	17 06       	cpc	r1, r23
    1040:	18 06       	cpc	r1, r24
    1042:	99 1f       	adc	r25, r25
    1044:	f1 cf       	rjmp	.-30     	; 0x1028 <__fp_splitA+0xc>
    1046:	86 95       	lsr	r24
    1048:	71 05       	cpc	r23, r1
    104a:	61 05       	cpc	r22, r1
    104c:	08 94       	sec
    104e:	08 95       	ret

00001050 <__fp_zero>:
    1050:	e8 94       	clt

00001052 <__fp_szero>:
    1052:	bb 27       	eor	r27, r27
    1054:	66 27       	eor	r22, r22
    1056:	77 27       	eor	r23, r23
    1058:	cb 01       	movw	r24, r22
    105a:	97 f9       	bld	r25, 7
    105c:	08 95       	ret

0000105e <__mulsf3>:
    105e:	0e 94 42 08 	call	0x1084	; 0x1084 <__mulsf3x>
    1062:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_round>
    1066:	0e 94 e7 07 	call	0xfce	; 0xfce <__fp_pscA>
    106a:	38 f0       	brcs	.+14     	; 0x107a <__mulsf3+0x1c>
    106c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__fp_pscB>
    1070:	20 f0       	brcs	.+8      	; 0x107a <__mulsf3+0x1c>
    1072:	95 23       	and	r25, r21
    1074:	11 f0       	breq	.+4      	; 0x107a <__mulsf3+0x1c>
    1076:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_inf>
    107a:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_nan>
    107e:	11 24       	eor	r1, r1
    1080:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_szero>

00001084 <__mulsf3x>:
    1084:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_split3>
    1088:	70 f3       	brcs	.-36     	; 0x1066 <__mulsf3+0x8>

0000108a <__mulsf3_pse>:
    108a:	95 9f       	mul	r25, r21
    108c:	c1 f3       	breq	.-16     	; 0x107e <__mulsf3+0x20>
    108e:	95 0f       	add	r25, r21
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	55 1f       	adc	r21, r21
    1094:	62 9f       	mul	r22, r18
    1096:	f0 01       	movw	r30, r0
    1098:	72 9f       	mul	r23, r18
    109a:	bb 27       	eor	r27, r27
    109c:	f0 0d       	add	r31, r0
    109e:	b1 1d       	adc	r27, r1
    10a0:	63 9f       	mul	r22, r19
    10a2:	aa 27       	eor	r26, r26
    10a4:	f0 0d       	add	r31, r0
    10a6:	b1 1d       	adc	r27, r1
    10a8:	aa 1f       	adc	r26, r26
    10aa:	64 9f       	mul	r22, r20
    10ac:	66 27       	eor	r22, r22
    10ae:	b0 0d       	add	r27, r0
    10b0:	a1 1d       	adc	r26, r1
    10b2:	66 1f       	adc	r22, r22
    10b4:	82 9f       	mul	r24, r18
    10b6:	22 27       	eor	r18, r18
    10b8:	b0 0d       	add	r27, r0
    10ba:	a1 1d       	adc	r26, r1
    10bc:	62 1f       	adc	r22, r18
    10be:	73 9f       	mul	r23, r19
    10c0:	b0 0d       	add	r27, r0
    10c2:	a1 1d       	adc	r26, r1
    10c4:	62 1f       	adc	r22, r18
    10c6:	83 9f       	mul	r24, r19
    10c8:	a0 0d       	add	r26, r0
    10ca:	61 1d       	adc	r22, r1
    10cc:	22 1f       	adc	r18, r18
    10ce:	74 9f       	mul	r23, r20
    10d0:	33 27       	eor	r19, r19
    10d2:	a0 0d       	add	r26, r0
    10d4:	61 1d       	adc	r22, r1
    10d6:	23 1f       	adc	r18, r19
    10d8:	84 9f       	mul	r24, r20
    10da:	60 0d       	add	r22, r0
    10dc:	21 1d       	adc	r18, r1
    10de:	82 2f       	mov	r24, r18
    10e0:	76 2f       	mov	r23, r22
    10e2:	6a 2f       	mov	r22, r26
    10e4:	11 24       	eor	r1, r1
    10e6:	9f 57       	subi	r25, 0x7F	; 127
    10e8:	50 40       	sbci	r21, 0x00	; 0
    10ea:	9a f0       	brmi	.+38     	; 0x1112 <__mulsf3_pse+0x88>
    10ec:	f1 f0       	breq	.+60     	; 0x112a <__mulsf3_pse+0xa0>
    10ee:	88 23       	and	r24, r24
    10f0:	4a f0       	brmi	.+18     	; 0x1104 <__mulsf3_pse+0x7a>
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	bb 1f       	adc	r27, r27
    10f8:	66 1f       	adc	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	88 1f       	adc	r24, r24
    10fe:	91 50       	subi	r25, 0x01	; 1
    1100:	50 40       	sbci	r21, 0x00	; 0
    1102:	a9 f7       	brne	.-22     	; 0x10ee <__mulsf3_pse+0x64>
    1104:	9e 3f       	cpi	r25, 0xFE	; 254
    1106:	51 05       	cpc	r21, r1
    1108:	80 f0       	brcs	.+32     	; 0x112a <__mulsf3_pse+0xa0>
    110a:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_inf>
    110e:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_szero>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	e4 f3       	brlt	.-8      	; 0x110e <__mulsf3_pse+0x84>
    1116:	98 3e       	cpi	r25, 0xE8	; 232
    1118:	d4 f3       	brlt	.-12     	; 0x110e <__mulsf3_pse+0x84>
    111a:	86 95       	lsr	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b7 95       	ror	r27
    1122:	f7 95       	ror	r31
    1124:	e7 95       	ror	r30
    1126:	9f 5f       	subi	r25, 0xFF	; 255
    1128:	c1 f7       	brne	.-16     	; 0x111a <__mulsf3_pse+0x90>
    112a:	fe 2b       	or	r31, r30
    112c:	88 0f       	add	r24, r24
    112e:	91 1d       	adc	r25, r1
    1130:	96 95       	lsr	r25
    1132:	87 95       	ror	r24
    1134:	97 f9       	bld	r25, 7
    1136:	08 95       	ret

00001138 <__itoa_ncheck>:
    1138:	bb 27       	eor	r27, r27
    113a:	4a 30       	cpi	r20, 0x0A	; 10
    113c:	31 f4       	brne	.+12     	; 0x114a <__itoa_ncheck+0x12>
    113e:	99 23       	and	r25, r25
    1140:	22 f4       	brpl	.+8      	; 0x114a <__itoa_ncheck+0x12>
    1142:	bd e2       	ldi	r27, 0x2D	; 45
    1144:	90 95       	com	r25
    1146:	81 95       	neg	r24
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__utoa_common>

0000114e <__utoa_ncheck>:
    114e:	bb 27       	eor	r27, r27

00001150 <__utoa_common>:
    1150:	fb 01       	movw	r30, r22
    1152:	55 27       	eor	r21, r21
    1154:	aa 27       	eor	r26, r26
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	aa 1f       	adc	r26, r26
    115c:	a4 17       	cp	r26, r20
    115e:	10 f0       	brcs	.+4      	; 0x1164 <__utoa_common+0x14>
    1160:	a4 1b       	sub	r26, r20
    1162:	83 95       	inc	r24
    1164:	50 51       	subi	r21, 0x10	; 16
    1166:	b9 f7       	brne	.-18     	; 0x1156 <__utoa_common+0x6>
    1168:	a0 5d       	subi	r26, 0xD0	; 208
    116a:	aa 33       	cpi	r26, 0x3A	; 58
    116c:	08 f0       	brcs	.+2      	; 0x1170 <__utoa_common+0x20>
    116e:	a9 5d       	subi	r26, 0xD9	; 217
    1170:	a1 93       	st	Z+, r26
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	79 f7       	brne	.-34     	; 0x1154 <__utoa_common+0x4>
    1176:	b1 11       	cpse	r27, r1
    1178:	b1 93       	st	Z+, r27
    117a:	11 92       	st	Z+, r1
    117c:	cb 01       	movw	r24, r22
    117e:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <strrev>

00001182 <strrev>:
    1182:	dc 01       	movw	r26, r24
    1184:	fc 01       	movw	r30, r24
    1186:	67 2f       	mov	r22, r23
    1188:	71 91       	ld	r23, Z+
    118a:	77 23       	and	r23, r23
    118c:	e1 f7       	brne	.-8      	; 0x1186 <strrev+0x4>
    118e:	32 97       	sbiw	r30, 0x02	; 2
    1190:	04 c0       	rjmp	.+8      	; 0x119a <strrev+0x18>
    1192:	7c 91       	ld	r23, X
    1194:	6d 93       	st	X+, r22
    1196:	70 83       	st	Z, r23
    1198:	62 91       	ld	r22, -Z
    119a:	ae 17       	cp	r26, r30
    119c:	bf 07       	cpc	r27, r31
    119e:	c8 f3       	brcs	.-14     	; 0x1192 <strrev+0x10>
    11a0:	08 95       	ret

000011a2 <eeprom_read_block>:
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22

000011a6 <eeprom_read_blraw>:
    11a6:	fc 01       	movw	r30, r24
    11a8:	e1 99       	sbic	0x1c, 1	; 28
    11aa:	fe cf       	rjmp	.-4      	; 0x11a8 <eeprom_read_blraw+0x2>
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <eeprom_read_blraw+0x14>
    11ae:	ff bb       	out	0x1f, r31	; 31
    11b0:	ee bb       	out	0x1e, r30	; 30
    11b2:	e0 9a       	sbi	0x1c, 0	; 28
    11b4:	31 96       	adiw	r30, 0x01	; 1
    11b6:	0d b2       	in	r0, 0x1d	; 29
    11b8:	0d 92       	st	X+, r0
    11ba:	41 50       	subi	r20, 0x01	; 1
    11bc:	50 40       	sbci	r21, 0x00	; 0
    11be:	b8 f7       	brcc	.-18     	; 0x11ae <eeprom_read_blraw+0x8>
    11c0:	08 95       	ret

000011c2 <eeprom_write_block>:
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <eeprom_write_block+0xc>
    11c8:	2d 91       	ld	r18, X+
    11ca:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <eeprom_write_r18>
    11ce:	41 50       	subi	r20, 0x01	; 1
    11d0:	50 40       	sbci	r21, 0x00	; 0
    11d2:	d0 f7       	brcc	.-12     	; 0x11c8 <eeprom_write_block+0x6>
    11d4:	08 95       	ret

000011d6 <eeprom_write_byte>:
    11d6:	26 2f       	mov	r18, r22

000011d8 <eeprom_write_r18>:
    11d8:	e1 99       	sbic	0x1c, 1	; 28
    11da:	fe cf       	rjmp	.-4      	; 0x11d8 <eeprom_write_r18>
    11dc:	9f bb       	out	0x1f, r25	; 31
    11de:	8e bb       	out	0x1e, r24	; 30
    11e0:	2d bb       	out	0x1d, r18	; 29
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	e2 9a       	sbi	0x1c, 2	; 28
    11e8:	e1 9a       	sbi	0x1c, 1	; 28
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	08 95       	ret

000011f0 <_exit>:
    11f0:	f8 94       	cli

000011f2 <__stop_program>:
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <__stop_program>
